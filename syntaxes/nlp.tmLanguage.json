{
    "scopeName": "source.nlp",
    "fileTypes": [
        "nlp",
        "pat"
    ],
    "name": "NLP",
    "patterns": [
        {
            "include": "#expression"
        },
        {
            "name": "keyword.region.nlp",
            "match": "(@(@)?)(CHECK|CODE|DECL|MULTI|NODES|PATH|POST|PRE|RULES)\\b"
        },
        {
            "name": "keyword.constants.nlp",
            "match": "\\b_ROOT\\b"
        },
        {
            "name": "keyword.other.nlp",
            "match": "\\b(?i:(cap|cout|else|gp|group|if|inc|return|while))\\b"
        },
        {
            "name": "keyword.operator.nlp",
            "match": "\\b(?i:(and|not|or|in|>|<|<>|/|\\|+|-|=))\\b"
        },
        {
            "match": "([\\w_]+)\\s*\\(",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#functions-node"
                        },
                        {
                            "include": "#functions"
                        }
                    ]
                }
            }
        }
    ],
    "repository": {
        "functions-node": {
            "name": "entity.name.function.letter.nlp",
            "match": "\\b(G|N|S|X|L)\\b"
        },
        "functions": {
            "name": "entity.name.function.nlp",
            "match": "\\b(?i:(addarg|addattr|addcnode|addconcept|addconval|addnode|addnumval|addstmt|addstrs|addstrval|addsval|addword|arraylength|attrchange|attrexists|attrname|attrtype|attrvals|attrwithval|batchstart|cap|cbuf|closefile|conceptname|conceptpath|conval|cout|coutreset|dballocstmt|dbbindcol|dbclose|dbexec|dbexecstmt|dbfetch|dbfreestmt|dbopen|deaccent|debug|dictfindword|dictfirst|dictgetword|dictnext|down|else|eltnode|excise|exitpass|exittopopup|factorial|fail|fileout|findana|findattr|findattrs|findconcept|findhierconcept|findnode|findphrase|findroot|findvals|findwordpath|firstnode|flt|fltval|fncallstart|fprintgvar|fprintnvar|fprintxvar|fprintvar|gdump|getconcept|getconval|getnumval|getpopupdata|getstrval|getsval|ginc|gp|group|gtolower|guniq|hitconf|if|inc|inheritval|inputrange|inputrangetofile|interactive|kbdumptree|lasteltnode|lastnode|length|lengthr|levenshtein|lextagger|listadd|listnode|LJ|lj|logten|lookup|lowercase|makeconcept|makeparentconcept|makephrase|makestmt|merge|merger|mkdir|movecleft|movecright|movesem|ndump|next|nextattr|nextval|ninc|nodeconcept|nodeowner|noop|num|numrange|numval|openfile|or|pathconcept|percentstr|permuten|phraselength|phraseraw|phrasetext|pncopyvars|pndown|pninsert|pnmakevar|pnname|pnnext|pnprev|pnreplaceval|pnroot|pnsingletdown|pnup|pnvar|pnvarnames|pranchor|prchild|preaction|printvar|pndeletechilds|pnrename|prev|print|printr|prlit|prrange|prtree|prunephrases|prxtree|regexp|regexpi|renameattr|renamechild|renameconcept|renamenode|replaceval|resolveurl|return|returnstmt|rfaaction|rfaactions|rfaarg|rfaargtolist|rfacode|rfaelement|rfaelt|rfaexpr|rfalist|rfalitelt|rfalittoaction|rfalittopair|rfaname|rfanodes|rfanonlit|rfanonlitelt|rfanum|rfaop|rfapair|rfapairs|rfapostunary|rfapres|rfarange|rfarecurse|rfarecurses|rfaregion|rfaregions|rfarule|rfarulelts|rfarulemark|rfarules|rfarulesfile|rfaselect|rfastr|rfasugg|rfaunary|rfavar|rfbarg|rfbdecl|rfbdecls|rightjustifynum|rmattr|rmattrs|rmattrval|rmchild|rmchildren|rmconcept|rmcphrase|rmnode|rmphrase|rmval|rmvals|rmword|sdump|setbase|setlookahead|setunsealed|single|singler|singlex|singlezap|sortconsbyattr|sortchilds|sorthier|sortphrase|sortvals|spellcandidates|spellcorrect|spellword|splice|split|sqlstr|startout|stem|stopout|str|strchar|strchr|strchrcount|strclean|strcontains|strcontainsnocase|strendswith|strequal|strequalnocase|strescape|strunescape|strgreaterthan|strisalpha|strisdigit|strislower|strisupper|strlength|strlessthan|strnotequal|strnotequalnocase|strpiece|strrchr|strspellcandidate|strspellcompare|strstartswith|strsubst|strtolower|strtotitle|strtoupper|strtrim|strval|strwrap|succeed|suffix|system|take|today|topdir|unknown|unpackdirs|up|uppercase|urlbase|urltofile|var|vareq|varfn|varfnarray|varinlist|varne|varstrs|varz|wninit|wnsensestoconcept|wnhypnymstoconcept|while|whilestmt|wordindex|wordpath|writekb|xaddlen|xaddnvar|xdump|xinc|xmlstr|xrename))\\b"
        },
        "expression": {
            "name": "meta.expression.nlp",
            "patterns": [
                {
                    "include": "#rules-region"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#literal"
                }
            ]
        },
        "rules-region": {
            "begin": "([_\\w]+)\\s*((\\[[^\\]]*\\]))*\\s*(<-)",
            "beginCaptures": {
                "1": {
                    "name": "variable.rewrite.nlp"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#attributes"
                        }
                    ]
                },
                "3": {
                    "name": "variable.rewrite-symbol.nlp"
                }
            },
            "end": "@@",
            "endCaptures": {
                "0": {
                    "name": "keyword.region.nlp"
                }
            },
            "patterns": [
                {
                    "include": "#token"
                },
                {
                    "include": "#attributes"
                },
                {
                    "include": "#constant-nodes"
                },
                {
                    "include": "#escaped-char"
                },
                {
                    "include": "#comment-line"
                }
            ]
        },
        "attributes": {
            "begin": "\\[",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.square.open"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.square.close"
                }
            },
            "patterns": [
                {
                    "include": "#attribute-equals"
                },
                {
                    "include": "#constant-nodes"
                },
                {
                    "include": "#token"
                },
                {
                    "include": "#attribute"
                },
                {
                    "include": "#comment-line"
                }
            ],
            "name": "meta.rules.rule.attribute.nlp"
        },
        "constant-nodes": {
            "name": "keyword.constants.nlp",
            "match": "\\b_(xWILD|xNUM|xALPHA|xWHITE|xNIL|xSTART|xEND|xCTRL)\\b"
        },
        "attribute-equals": {
            "begin": "([_\\w]+)\\s*(=)\\s*(\\()",
            "beginCaptures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#attribute"
                        }
                    ]
                },
                "2": {
                    "name": "keyword.equals.nlp"
                },
                "3": {
                    "name": "punctuation.paren.open"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.paren.open"
                }
            },
            "patterns": [
                {
                    "include": "#token"
                },
                {
                    "include": "#attribute"
                },
                {
                    "include": "#constant-nodes"
                },
                {
                    "include": "#escaped-char"
                }
            ]
        },
        "attribute": {
            "name": "keyword.attribute.nlp",
            "match": "\\b(?i:(attr|attrs|da|deacc|deaccent|except|excepts|fail|fails|gp|group|layer|layers|look|lookahead|match|matches|max|min|nest|o|one|opt|option|optional|pass|passes|plus|recurse|ren|rename|s|singlet|star|t|tree|trig|trigger|unsealed))\\b"
        },
        "escaped-char": {
            "name": "constant.character.escape",
            "match": "\\\\."
        },
        "token": {
            "name": "variable.parameter.nlp",
            "match": "_[\\w]+\\b"
        },
        "comment": {
            "name": "comment.nlp",
            "patterns": [
                {
                    "include": "#comment-line"
                },
                {
                    "include": "#comment-block"
                }
            ]
        },
        "comment-line": {
            "match": "#.*$\\n?",
            "name": "comment.line.nlp"
        },
        "comment-block": {
            "begin": "/\\*",
            "beginCaptures": {
                "0": {
                    "name": "comment.block.begin.nlp"
                }
            },
            "end": "\\*/",
            "endCaptures": {
                "0": {
                    "name": "comment.block.end.nlp"
                }
            },
            "name": "comment.block.nlp"
        },
        "string": {
            "name": "string.nlp",
            "patterns": [
                {
                    "include": "#qstring-double"
                }
            ]
        },
        "qstring-double": {
            "begin": "\"",
            "end": "\\\"|(?:[^\\\\\\n]$)",
            "name": "string.double.nlp",
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "string-character-escape": {
            "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)",
            "name": "constant.character.escape.nlp"
        },
        "literal": {
            "name": "literal.nlp",
            "patterns": [
                {
                    "include": "#numeric-literal"
                },
                {
                    "include": "#array-literal"
                }
            ]
        },
        "numeric-literal": {
            "match": "\\b(?<=[^$])((0(x|X)[0-9a-fA-F]+)|(0(o|O)[0-7]+)|(0(b|B)(0|1)+)|(([0-9]+(\\.[0-9]+)?))([eE]([+-]?)[0-9]+(\\.[0-9]+)?)?)\\b",
            "name": "constant.numeric.nlp"
        },
        "array-literal": {
            "begin": "\\[",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.square.nlp"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.square.nlp"
                }
            },
            "name": "meta.array.literal.nlp",
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        }
    }
}
