{
    "name": "nlp",
    "displayName": "NLP",
    "description": "NLP++: dedicated computer language for NLP - Anything Thinkable",
    "icon": "resources/NLPppLogo.png",
    "version": "2.45.1",
    "publisher": "dehilster",
    "enableApiProposals": false,
    "engines": {
        "vscode": "^1.70.0"
    },
    "categories": [
        "Programming Languages",
        "Snippets",
        "Linters"
    ],
    "activationEvents": [
        "onLanguage:nlp"
    ],
    "main": "./dist/extension.js",
    "author": {
        "name": "David de Hilster"
    },
    "homepage": "http://visualtext.org",
    "bugs": {
        "url": "https://github.com/VisualText/vscode-nlp/issues",
        "email": "contact@visualtext.org"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/visualtext/vscode-nlp.git"
    },
    "galleryBanner": {
        "color": "#9ba6de",
        "theme": "light"
    },
    "extensionDependencies": [
        "vscode.json"
    ],
    "contributes": {
        "views": {
            "visualText": [
                {
                    "id": "textView",
                    "name": "Text",
                    "icon": "resources/dark/file.svg"
                },
                {
                    "id": "sequenceView",
                    "name": "Analyzer",
                    "icon": "resources/dark/dna.svg"
                },
                {
                    "id": "kbView",
                    "name": "KB",
                    "icon": "resources/dark/kb.svg"
                }
            ],
            "vtOutput": [
                {
                    "id": "outputView",
                    "name": "Output Files",
                    "icon": "resources/dark/document.svg"
                },
                {
                    "id": "analyzerView",
                    "name": "Analyzers",
                    "icon": "resources/dark/gear.svg"
                },
                {
                    "id": "findView",
                    "name": "Find Results",
                    "icon": "resources/dark/searchAllvg"
                },
                {
                    "id": "logView",
                    "name": "Logging",
                    "icon": "resources/dark/error.svg"
                }
            ]
        },
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "visualText",
                    "title": "VisualText",
                    "icon": "resources/NLPIcon.svg"
                }
            ],
            "panel": [
                {
                    "id": "vtOutput",
                    "title": "VisualText",
                    "icon": "resources/dark/document.svg"
                }
            ]
        },
        "iconThemes": [
            {
                "id": "nlp",
                "label": "NLP Files",
                "path": "./resources/vs_nlp-icon-theme.json"
            }
        ],
        "languages": [
            {
                "id": "nlp",
                "extensions": [
                    "nlp",
                    "pat"
                ],
                "aliases": [
                    "NLP",
                    "nlp"
                ],
                "configuration": "./nlp-configuration.json"
            },
            {
                "id": "txxt",
                "extensions": [
                    "txxt"
                ],
                "aliases": [
                    "txxt"
                ],
                "configuration": "./txxt-configuration.json"
            },
            {
                "id": "tree",
                "extensions": [
                    "tree"
                ],
                "aliases": [
                    "tree"
                ],
                "configuration": "./tree-configuration.json"
            },
            {
                "id": "kbb",
                "extensions": [
                    "kbb"
                ],
                "aliases": [
                    "kbb"
                ],
                "configuration": "./kbb-configuration.json"
            },
            {
                "id": "dict",
                "extensions": [
                    "dict"
                ],
                "aliases": [
                    "dict"
                ],
                "configuration": "./dict-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "nlp",
                "scopeName": "source.nlp",
                "path": "./syntaxes/nlp.tmLanguage.json"
            },
            {
                "language": "txxt",
                "scopeName": "source.txxt",
                "path": "./syntaxes/txxt.tmLanguage.json"
            },
            {
                "language": "tree",
                "scopeName": "source.tree",
                "path": "./syntaxes/tree.tmLanguage.json"
            },
            {
                "language": "kbb",
                "scopeName": "source.kbb",
                "path": "./syntaxes/kbb.tmLanguage.json"
            },
            {
                "language": "dict",
                "scopeName": "source.dict",
                "path": "./syntaxes/dict.tmLanguage.json"
            }
        ],
        "snippets": [
            {
                "language": "nlp",
                "scopeName": "source.nlp",
                "path": "./snippets/nlp.json"
            }
        ],
        "commands": [
            {
                "command": "outputView.editTest",
                "title": "Edit Test File",
                "icon": {
                    "light": "resources/light/test.svg",
                    "dark": "resources/dark/test.svg"
                }
            },
            {
                "command": "textView.python",
                "title": "Python Scripts",
                "icon": {
                    "light": "resources/light/python.svg",
                    "dark": "resources/dark/python.svg"
                }
            },
            {
                "command": "textView.fastLoad",
                "title": "Fast Load (OFF)",
                "icon": {
                    "light": "resources/light/test.svg",
                    "dark": "resources/dark/test.svg"
                }
            },
            {
                "command": "textView.fastLoadOff",
                "title": "âœ“ Fast Load (ON)",
                "icon": {
                    "light": "resources/light/test.svg",
                    "dark": "resources/dark/test.svg"
                }
            },
            {
                "command": "textView.editTest",
                "title": "Edit Test File",
                "icon": {
                    "light": "resources/light/test.svg",
                    "dark": "resources/dark/test.svg"
                }
            },
            {
                "command": "textView.deleteTest",
                "title": "Delete Test Files",
                "icon": {
                    "light": "resources/light/test.svg",
                    "dark": "resources/dark/test.svg"
                }
            },
            {
                "command": "textView.runTest",
                "title": "Run Regression Test",
                "icon": {
                    "light": "resources/light/test.svg",
                    "dark": "resources/dark/test.svg"
                }
            },
            {
                "command": "outputView.deleteTest",
                "title": "Delete Test Files",
                "icon": {
                    "light": "resources/light/test.svg",
                    "dark": "resources/dark/test.svg"
                }
            },
            {
                "command": "outputView.runTest",
                "title": "Run Regression Test",
                "icon": {
                    "light": "resources/light/test.svg",
                    "dark": "resources/dark/test.svg"
                }
            },
            {
                "command": "outputView.addTest",
                "title": "Add as Test File",
                "icon": {
                    "light": "resources/light/load.svg",
                    "dark": "resources/dark/load.svg"
                }
            },
            {
                "command": "kbView.modLoad",
                "title": "Load Mod File",
                "icon": {
                    "light": "resources/light/load.svg",
                    "dark": "resources/dark/load.svg"
                }
            },
            {
                "command": "kbView.modCreate",
                "title": "Create Mod File",
                "icon": {
                    "light": "resources/light/mod.svg",
                    "dark": "resources/dark/mod.svg"
                }
            },
            {
                "command": "sequenceView.compareLibrary",
                "title": "Compare with Latest Library File",
                "icon": {
                    "light": "resources/light/test.svg",
                    "dark": "resources/dark/test.svg"
                }
            },
            {
                "command": "sequenceView.copyContext",
                "title": "Copy Context to Sister",
                "icon": {
                    "light": "resources/light/test.svg",
                    "dark": "resources/dark/test.svg"
                }
            },
            {
                "command": "sequenceView.compareSisters",
                "title": "Compare Sister Files",
                "icon": {
                    "light": "resources/light/test.svg",
                    "dark": "resources/dark/test.svg"
                }
            },
            {
                "command": "sequenceView.modAdd",
                "title": "Add to Mod File",
                "icon": {
                    "light": "resources/light/mod.svg",
                    "dark": "resources/dark/mod.svg"
                }
            },
            {
                "command": "kbView.modAdd",
                "title": "Add to Mod File",
                "icon": {
                    "light": "resources/light/mod.svg",
                    "dark": "resources/dark/mod.svg"
                }
            },
            {
                "command": "textView.modAdd",
                "title": "Add to Mod File",
                "icon": {
                    "light": "resources/light/mod.svg",
                    "dark": "resources/dark/mod.svg"
                }
            },
            {
                "command": "nlp.video",
                "title": "Help Video VisualText Version 2",
                "icon": {
                    "light": "resources/light/video.svg",
                    "dark": "resources/dark/video.svg"
                }
            },
            {
                "command": "sequenceView.video",
                "title": "Help Video Analyzer Sequence Viewer",
                "icon": {
                    "light": "resources/light/video.svg",
                    "dark": "resources/dark/video.svg"
                }
            },
            {
                "command": "outputView.video",
                "title": "Help Video for Output File Viewer",
                "icon": {
                    "light": "resources/light/video.svg",
                    "dark": "resources/dark/video.svg"
                }
            },
            {
                "command": "analyzerView.newECLFile",
                "title": "New ECL File",
                "icon": {
                    "light": "resources/light/ecl.svg",
                    "dark": "resources/dark/ecl.svg"
                }
            },
            {
                "command": "analyzerView.manifestGenerate",
                "title": "Generate HPCC Manifest File",
                "icon": {
                    "light": "resources/light/manifest.svg",
                    "dark": "resources/dark/manifest.svg"
                }
            },
            {
                "command": "analyzerView.video",
                "title": "Help Video for Analyzer Viewer",
                "icon": {
                    "light": "resources/light/video.svg",
                    "dark": "resources/dark/video.svg"
                }
            },
            {
                "command": "kbView.langLibs",
                "title": "Language Library",
                "icon": {
                    "light": "resources/light/dict.svg",
                    "dark": "resources/dark/dict.svg"
                }
            },
            {
                "command": "kbView.miscLibs",
                "title": "Miscelaneous Libraries",
                "icon": {
                    "light": "resources/light/dict.svg",
                    "dark": "resources/dark/dict.svg"
                }
            },
            {
                "command": "kbView.video",
                "title": "Help Video for KB Viewer",
                "icon": {
                    "light": "resources/light/video.svg",
                    "dark": "resources/dark/video.svg"
                }
            },
            {
                "command": "kbView.copyToAnalyzer",
                "title": "Copy file to Another Analyzer",
                "icon": {
                    "light": "resources/light/kb-copyto.svg",
                    "dark": "resources/dark/kb-copyto.svg"
                }
            },
            {
                "command": "kbView.toggleActive",
                "title": "Toggle Active/Inactive",
                "icon": {
                    "light": "resources/light/toggle.svg",
                    "dark": "resources/dark/toggle.svg"
                }
            },
            {
                "command": "kbView.existingFiles",
                "title": "Import KB files",
                "icon": {
                    "light": "resources/light/searchAll.svg",
                    "dark": "resources/dark/searchAll.svg"
                }
            },
            {
                "command": "kbView.explore",
                "title": "Explore KB Folder",
                "icon": {
                    "light": "resources/light/searchAll.svg",
                    "dark": "resources/dark/searchAll.svg"
                }
            },
            {
                "command": "kbView.search",
                "title": "Search",
                "icon": {
                    "light": "resources/light/searchAll.svg",
                    "dark": "resources/dark/searchAll.svg"
                }
            },
            {
                "command": "kbView.mergeDicts",
                "title": "Merge dictionary files",
                "icon": {
                    "light": "resources/light/gear.svg",
                    "dark": "resources/dark/gear.svg"
                }
            },
            {
                "command": "kbView.cleanFiles",
                "title": "Clean files",
                "icon": {
                    "light": "resources/light/clean.svg",
                    "dark": "resources/dark/clean.svg"
                }
            },
            {
                "command": "kbView.generateMain",
                "title": "Generate main.kb",
                "icon": {
                    "light": "resources/light/gear.svg",
                    "dark": "resources/dark/gear.svg"
                }
            },
            {
                "command": "kbView.refreshAll",
                "title": "Refresh List",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "kbView.newKBBFile",
                "title": "New KBB File",
                "icon": {
                    "light": "resources/light/kbb-new.svg",
                    "dark": "resources/dark/kbb-new.svg"
                }
            },
            {
                "command": "kbView.newDictFile",
                "title": "New Dictionary File",
                "icon": {
                    "light": "resources/light/dict.svg",
                    "dark": "resources/dark/dict.svg"
                }
            },
            {
                "command": "kbView.deleteFile",
                "title": "Delete KB File",
                "icon": {
                    "light": "resources/light/chrome-close.svg",
                    "dark": "resources/dark/chrome-close.svg"
                }
            },
            {
                "command": "kbView.rename",
                "title": "Rename KB File",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "nlp.sortText",
                "title": "Sort & Unique text lines",
                "description": "Sort and unique text lines"
            },
            {
                "command": "nlp.lowerCase",
                "title": "Change to Lowercase",
                "description": "Change the selected text to lower case"
            },
            {
                "command": "nlp.removeAccents",
                "title": "Remove Accents",
                "description": "Removes accents from the selected text"
            },
            {
                "command": "helpView.windowCHMHelp",
                "category": "NLP",
                "title": "Open Full Windows Help",
                "description": "Open online function help"
            },
            {
                "command": "helpView.openOnlineFunctionHelp",
                "category": "NLP",
                "title": "Open online function help",
                "description": "Open online function help"
            },
            {
                "command": "helpView.openOnlineVariableHelp",
                "category": "NLP",
                "title": "Open online variable help",
                "description": "Open online variable help"
            },
            {
                "command": "nlp.selectSequence",
                "category": "NLP",
                "title": "Reveal Sequence Number",
                "description": "Reveals the sequence number for the NLP file"
            },
            {
                "command": "helpView.lookup",
                "category": "NLP",
                "title": "Lookup Word",
                "description": "Lookup a term in the help"
            },
            {
                "command": "helpView.lookupBrowser",
                "category": "NLP",
                "title": "Lookup Word in Browser",
                "description": "Lookup a term in the help in Browser"
            },
            {
                "command": "textView.copyToAnalyzer",
                "title": "Copy file/folder to Another Analyzer",
                "icon": {
                    "light": "resources/light/text-copyto.svg",
                    "dark": "resources/dark/text-copyto.svg"
                }
            },
            {
                "command": "textView.exploreAll",
                "title": "Explore Input Folder",
                "icon": {
                    "light": "resources/light/folder.svg",
                    "dark": "resources/dark/folder.svg"
                }
            },
            {
                "command": "textView.explore",
                "title": "Explore Current Folder",
                "icon": {
                    "light": "resources/light/folder.svg",
                    "dark": "resources/dark/folder.svg"
                }
            },
            {
                "command": "textView.propertiesFile",
                "title": "Properties",
                "icon": {
                    "light": "resources/light/run.svg",
                    "dark": "resources/dark/run.svg"
                }
            },
            {
                "command": "textView.propertiesFolder",
                "title": "Properties",
                "icon": {
                    "light": "resources/light/run.svg",
                    "dark": "resources/dark/run.svg"
                }
            },
            {
                "command": "textView.analyze",
                "title": "Analyze file",
                "icon": {
                    "light": "resources/light/run.svg",
                    "dark": "resources/dark/run.svg"
                }
            },
            {
                "command": "textView.analyzerCurrent",
                "title": "Analyze Current file",
                "icon": {
                    "light": "resources/light/run.svg",
                    "dark": "resources/dark/run.svg"
                }
            },
            {
                "command": "textView.rename",
                "title": "Rename File",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "textView.analyzeDir",
                "title": "Analyze Folder",
                "icon": {
                    "light": "resources/light/run.svg",
                    "dark": "resources/dark/run.svg"
                }
            },
            {
                "command": "textView.convert",
                "title": "Convert files to *.txt",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "textView.renameDir",
                "title": "Rename Folder",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "textView.splitDir",
                "title": "Split Folder",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "nlp.analyze",
                "category": "NLP",
                "title": "Analyze Text",
                "description": "Run the analyzer on a folder or text"
            },
            {
                "command": "nlp.ruleFired",
                "category": "NLP",
                "title": "View rule or dictionary match",
                "description": "View the rule that fired for this match"
            },
            {
                "command": "nlp.reformatRule",
                "category": "NLP",
                "title": "Reformat Rule",
                "description": "Reformat the rule with node numbers"
            },
            {
                "command": "nlp.reformatOneLine",
                "category": "NLP",
                "title": "Reformat Rule to One Line",
                "description": "Reformats the rule to be on one line"
            },
            {
                "command": "nlp.reformatParens",
                "category": "NLP",
                "title": "Reformat Rule Long Parens",
                "description": "Reformats the rule with paren attributes per line"
            },
            {
                "command": "nlp.searchWord",
                "category": "NLP",
                "title": "Search",
                "description": "Search for chosen word in passes"
            },
            {
                "command": "nlp.goToFunction",
                "category": "NLP",
                "title": "Go to Function",
                "description": "Go to the selected Function"
            },
            {
                "command": "nlp.generateRule",
                "category": "NLP",
                "title": "Generate Rule General",
                "description": "Generate a generalized rule from selected text"
            },
            {
                "command": "nlp.openPassFile",
                "category": "NLP",
                "title": "Open Pass File",
                "description": "Open pass file associated with the highlight file"
            },
            {
                "command": "nlp.generateExactRule",
                "category": "NLP",
                "title": "Generate Rule Exact",
                "description": "Generate an exact rule from selected text"
            },
            {
                "command": "nlp.opendisplayMatchedRules",
                "category": "NLP",
                "title": "Display Matched Rules",
                "description": "Display the rule matches for the pass"
            },
            {
                "command": "nlp.commentLines",
                "category": "NLP",
                "title": "Comment Line",
                "description": "Comments or uncomments selected lines"
            },
            {
                "command": "nlp.displayMatchedRules",
                "category": "Tree",
                "title": "Display Matched Rules",
                "description": "Display the rule matches for the pass"
            },
            {
                "command": "nlp.duplicateLine",
                "category": "Tree",
                "title": "Duplicate Line",
                "description": "Duplicate the current line"
            },
            {
                "command": "log.foldAll",
                "category": "Tree",
                "title": "Fold All",
                "description": "Fold all indents for entire text"
            },
            {
                "command": "log.unfoldAll",
                "category": "Tree",
                "title": "Unfold All",
                "description": "UnFold all indents for entire text"
            },
            {
                "command": "log.foldRecursively",
                "category": "Tree",
                "title": "Fold Recursively",
                "description": "Fold recursively"
            },
            {
                "command": "log.unfoldRecursively",
                "category": "Tree",
                "title": "Unfold Recursively",
                "description": "Unfold recursively"
            },
            {
                "command": "log.highlightText",
                "category": "Tree",
                "title": "Highlight text",
                "description": "Highlight the text of selected tree nodes"
            },
            {
                "command": "log.ruleFired",
                "category": "Tree",
                "title": "Display Rule Fired",
                "description": "Display the rule fired"
            },
            {
                "command": "log.generatePath",
                "category": "Tree",
                "title": "Generate @PATH",
                "description": "Generate context @PATH for rule file"
            },
            {
                "command": "log.openPassFile",
                "category": "Tree",
                "title": "Open Pass File",
                "description": "Opens pass file associated with tree"
            },
            {
                "command": "nlp.copyContext",
                "category": "Tree",
                "title": "Copy Context from Pass Above",
                "description": "Copies the context from the pass above this one"
            },
            {
                "command": "nlp.openSelTree",
                "category": "NLP",
                "title": "View selected tree",
                "description": "View the tree for the selected text"
            },
            {
                "command": "sequenceView.explore",
                "title": "Explore Sequence Folder"
            },
            {
                "command": "sequenceView.tokenize",
                "title": "Tokenizer"
            },
            {
                "command": "sequenceView.dicttok",
                "title": "Dictionary Tokenizer"
            },
            {
                "command": "sequenceView.dicttokz",
                "title": "Dictionary No Whitespace Tokenizer"
            },
            {
                "command": "sequenceView.chartok",
                "title": "Separate All Characters"
            },
            {
                "command": "sequenceView.cmltok",
                "title": "CML Tokenizer"
            },
            {
                "command": "sequenceView.toggleActive",
                "title": "Toggle Active/Inactive",
                "icon": {
                    "light": "resources/light/toggle.svg",
                    "dark": "resources/dark/toggle.svg"
                }
            },
            {
                "command": "sequenceView.convert",
                "title": "Convert .pat files to .nlp",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "sequenceView.finalTree",
                "title": "Display Final Tree",
                "icon": {
                    "light": "resources/light/tree.svg",
                    "dark": "resources/dark/tree.svg"
                }
            },
            {
                "command": "nlp.passTree",
                "title": "Display Pass Tree",
                "icon": {
                    "light": "resources/light/tree.svg",
                    "dark": "resources/dark/tree.svg"
                }
            },
            {
                "command": "sequenceView.reveal",
                "title": "Analyzer Sequence: Reveal"
            },
            {
                "command": "sequenceView.changeTitle",
                "title": "Analyzer Sequence: Change Title"
            },
            {
                "command": "sequenceView.typePat",
                "title": "One Time"
            },
            {
                "command": "sequenceView.typeRec",
                "title": "Recursive"
            },
            {
                "command": "sequenceView.typeOn",
                "title": "Active"
            },
            {
                "command": "sequenceView.typeOff",
                "title": "Inactive"
            },
            {
                "command": "sequenceView.newFolder",
                "title": "New Folder (after)",
                "icon": {
                    "light": "resources/light/new-folder.svg",
                    "dark": "resources/dark/new-folder.svg"
                }
            },
            {
                "command": "sequenceView.moveUp",
                "title": "Move Up",
                "icon": {
                    "light": "resources/light/up.svg",
                    "dark": "resources/dark/up.svg"
                }
            },
            {
                "command": "sequenceView.moveDown",
                "title": "Move Down",
                "icon": {
                    "light": "resources/light/down.svg",
                    "dark": "resources/dark/down.svg"
                }
            },
            {
                "command": "sequenceView.openKB",
                "title": "Open KB",
                "icon": {
                    "light": "resources/light/kb.svg",
                    "dark": "resources/dark/kb.svg"
                }
            },
            {
                "command": "sequenceView.displayMatchedRules",
                "title": "Display Matched Rules",
                "icon": {
                    "light": "resources/light/symbol-keyword.svg",
                    "dark": "resources/dark/symbol-keyword.svg"
                }
            },
            {
                "command": "sequenceView.openPass",
                "title": "Open NLP file",
                "icon": {
                    "light": "resources/light/code.svg",
                    "dark": "resources/dark/code.svg"
                }
            },
            {
                "command": "sequenceView.openTree",
                "title": "Open Tree file",
                "icon": {
                    "light": "resources/light/tree.svg",
                    "dark": "resources/dark/tree.svg"
                }
            },
            {
                "command": "sequenceView.renameFolder",
                "title": "Rename Folder",
                "icon": {
                    "light": "resources/light/code.svg",
                    "dark": "resources/dark/code.svg"
                }
            },
            {
                "command": "sequenceView.rename",
                "title": "Rename pass",
                "icon": {
                    "light": "resources/light/code.svg",
                    "dark": "resources/dark/code.svg"
                }
            },
            {
                "command": "sequenceView.insertLibrary",
                "title": "Select Library Pass",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.libraryKBFuncs",
                "title": "KB Functions",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.libraryTreeFuncs",
                "title": "Tree Functions",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.libraryUtilFuncs",
                "title": "Utility Functions",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.libraryLines",
                "title": "Lines",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.libraryLinesDictTokZ",
                "title": "Lines for DictTocZ",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.libraryWhiteSpaces",
                "title": "Remove White Space",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.insertNew",
                "title": "Rules",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.insertCode",
                "title": "Code",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.insertDecl",
                "title": "Functions",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.insert",
                "title": "Insert Existing Pass(es)",
                "icon": {
                    "light": "resources/light/file-code.svg",
                    "dark": "resources/dark/file-code.svg"
                }
            },
            {
                "command": "sequenceView.insertSister",
                "title": "Insert Existing Sister Pass(es)",
                "icon": {
                    "light": "resources/light/file-code.svg",
                    "dark": "resources/dark/file-code.svg"
                }
            },
            {
                "command": "sequenceView.insertAnalyzerBlock",
                "title": "Insert Analyzer Block(s)",
                "icon": {
                    "light": "resources/light/file-code.svg",
                    "dark": "resources/dark/file-code.svg"
                }
            },
            {
                "command": "sequenceView.deleteFolder",
                "title": "Delete Folder",
                "icon": {
                    "light": "resources/light/file-code.svg",
                    "dark": "resources/dark/file-code.svg"
                }
            },
            {
                "command": "sequenceView.delete",
                "title": "Delete pass",
                "icon": {
                    "light": "resources/light/file-code.svg",
                    "dark": "resources/dark/file-code.svg"
                }
            },
            {
                "command": "sequenceView.duplicate",
                "title": "Duplicate pass"
            },
            {
                "command": "sequenceView.insertOrphan",
                "title": "Insert Orphan Pass",
                "icon": {
                    "light": "resources/light/gear.svg",
                    "dark": "resources/dark/gear.svg"
                }
            },
            {
                "command": "sequenceView.search",
                "title": "Search",
                "icon": {
                    "light": "resources/light/searchAll.svg",
                    "dark": "resources/dark/searchAll.svg"
                }
            },
            {
                "command": "sequenceView.searchTop",
                "title": "Search Top Level Only",
                "icon": {
                    "light": "resources/light/search.svg",
                    "dark": "resources/dark/search.svg"
                }
            },
            {
                "command": "sequenceView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "textView.newDir",
                "title": "New Folder",
                "icon": {
                    "light": "resources/light/new-folder.svg",
                    "dark": "resources/dark/new-folder.svg"
                }
            },
            {
                "command": "textView.newDirTop",
                "title": "New Top Folder",
                "icon": {
                    "light": "resources/light/new-folder.svg",
                    "dark": "resources/dark/new-folder.svg"
                }
            },
            {
                "command": "textView.newText",
                "title": "New Text File",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "textView.newTextTop",
                "title": "New Top Text File",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "textView.importFiles",
                "title": "Import file(s)",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "textView.existingFolder",
                "title": "Insert existing folder",
                "icon": {
                    "light": "resources/light/new-folder.svg",
                    "dark": "resources/dark/new-folder.svg"
                }
            },
            {
                "command": "textView.search",
                "title": "Search",
                "icon": {
                    "light": "resources/light/searchAll.svg",
                    "dark": "resources/dark/searchAll.svg"
                }
            },
            {
                "command": "textView.deleteFile",
                "title": "Delete File",
                "icon": {
                    "light": "resources/light/chrome-close.svg",
                    "dark": "resources/dark/chrome-close.svg"
                }
            },
            {
                "command": "textView.deleteDir",
                "title": "Delete Folder",
                "icon": {
                    "light": "resources/light/chrome-close.svg",
                    "dark": "resources/dark/chrome-close.svg"
                }
            },
            {
                "command": "textView.moveToFolder",
                "title": "Move to selected folder",
                "icon": {
                    "light": "resources/light/right.svg",
                    "dark": "resources/dark/right.svg"
                }
            },
            {
                "command": "textView.moveUp",
                "title": "Move up a folder",
                "icon": {
                    "light": "resources/light/left.svg",
                    "dark": "resources/dark/left.svg"
                }
            },
            {
                "command": "analyzerView.deleteFile",
                "title": "Delete File",
                "icon": {
                    "light": "resources/light/chrome-close.svg",
                    "dark": "resources/dark/chrome-close.svg"
                }
            },
            {
                "command": "analyzerView.deleteFolder",
                "title": "Delete Folder",
                "icon": {
                    "light": "resources/light/chrome-close.svg",
                    "dark": "resources/dark/chrome-close.svg"
                }
            },
            {
                "command": "analyzerView.renameFile",
                "title": "Rename File",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "analyzerView.renameFolder",
                "title": "Rename Folder",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "analyzerView.renameAnalyzer",
                "title": "Rename Analyzer",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "analyzerView.moveToParent",
                "title": "Edit Parent Folder with VisualText",
                "icon": {
                    "light": "resources/light/left.svg",
                    "dark": "resources/dark/left.svg"
                }
            },
            {
                "command": "analyzerView.moveDownFolder",
                "title": "Edit this Folder with VisualText",
                "icon": {
                    "light": "resources/light/right.svg",
                    "dark": "resources/dark/right.svg"
                }
            },
            {
                "command": "analyzerView.updateColorizer",
                "title": "Update Colorizer",
                "icon": {
                    "light": "resources/light/color-mode.svg",
                    "dark": "resources/dark/color-mode.svg"
                }
            },
            {
                "command": "analyzerView.importAnalyzers",
                "title": "Import Existing Analyzer(s)",
                "icon": {
                    "light": "resources/light/readme.svg",
                    "dark": "resources/dark/readme.svg"
                }
            },
            {
                "command": "analyzerView.deleteReadMe",
                "title": "README Delete file",
                "icon": {
                    "light": "resources/light/readme.svg",
                    "dark": "resources/dark/readme.svg"
                }
            },
            {
                "command": "analyzerView.createReadMe",
                "title": "README Edit/Create file",
                "icon": {
                    "light": "resources/light/readme.svg",
                    "dark": "resources/dark/readme.svg"
                }
            },
            {
                "command": "analyzerView.editReadMe",
                "title": "README Edit/Create file",
                "icon": {
                    "light": "resources/light/readme.svg",
                    "dark": "resources/dark/readme.svg"
                }
            },
            {
                "command": "analyzerView.readMe",
                "title": "README Open file",
                "icon": {
                    "light": "resources/light/readme.svg",
                    "dark": "resources/dark/readme.svg"
                }
            },
            {
                "command": "analyzerView.newFolder",
                "title": "New folder",
                "icon": {
                    "light": "resources/light/folder.svg",
                    "dark": "resources/dark/folder.svg"
                }
            },
            {
                "command": "analyzerView.moveToFolder",
                "title": "Move to selected folder",
                "icon": {
                    "light": "resources/light/right.svg",
                    "dark": "resources/dark/right.svg"
                }
            },
            {
                "command": "analyzerView.moveUp",
                "title": "Move up a folder",
                "icon": {
                    "light": "resources/light/left.svg",
                    "dark": "resources/dark/left.svg"
                }
            },
            {
                "command": "analyzerView.exploreAll",
                "title": "Explore Analyzers folder",
                "icon": {
                    "light": "resources/light/folder.svg",
                    "dark": "resources/dark/folder.svg"
                }
            },
            {
                "command": "analyzerView.explore",
                "title": "Explore analyzer folder",
                "icon": {
                    "light": "resources/light/folder.svg",
                    "dark": "resources/dark/folder.svg"
                }
            },
            {
                "command": "analyzerView.loadExampleAnalyzers",
                "title": "Load Example Analyzers",
                "icon": {
                    "light": "resources/light/gear.svg",
                    "dark": "resources/dark/gear.svg"
                }
            },
            {
                "command": "analyzerView.deleteFileLogs",
                "title": "Delete Log Files in this Analyzer",
                "icon": {
                    "light": "resources/light/x-box.svg",
                    "dark": "resources/dark/x-box.svg"
                }
            },
            {
                "command": "analyzerView.deleteAllAnalyzerLogs",
                "title": "Delete Log Files for All Analyzers",
                "icon": {
                    "light": "resources/light/x-box.svg",
                    "dark": "resources/dark/x-box.svg"
                }
            },
            {
                "command": "analyzerView.copyAnalyzer",
                "title": "Copy Analyzer to Another Folder",
                "icon": {
                    "light": "resources/light/anacopy.svg",
                    "dark": "resources/dark/anacopy.svg"
                }
            },
            {
                "command": "analyzerView.dupeAnalyzer",
                "title": "Duplicate analyzer",
                "icon": {
                    "light": "resources/light/anacopy.svg",
                    "dark": "resources/dark/anacopy.svg"
                }
            },
            {
                "command": "analyzerView.copyAll",
                "title": "Copy All Analyzers to Another Folder",
                "icon": {
                    "light": "resources/light/anacopy.svg",
                    "dark": "resources/dark/anacopy.svg"
                }
            },
            {
                "command": "textView.deleteFileLogs",
                "title": "Remove Log Files",
                "icon": {
                    "light": "resources/light/x-box.svg",
                    "dark": "resources/dark/x-box.svg"
                }
            },
            {
                "command": "textView.deleteAnalyzerLogs",
                "title": "Delete All Log Files for this Analyzer",
                "icon": {
                    "light": "resources/light/x-box.svg",
                    "dark": "resources/dark/x-box.svg"
                }
            },
            {
                "command": "analyzerView.newAnalyzer",
                "title": "New Analyzer",
                "icon": {
                    "light": "resources/light/new-folder.svg",
                    "dark": "resources/dark/new-folder.svg"
                }
            },
            {
                "command": "analyzerView.deleteAnalyzer",
                "title": "Delete Analyzer",
                "icon": {
                    "light": "resources/light/chrome-close.svg",
                    "dark": "resources/dark/chrome-close.svg"
                }
            },
            {
                "command": "analyzerView.deleteAnalyzerLogs",
                "title": "Delete Analyzer Logs",
                "icon": {
                    "light": "resources/light/x-box.svg",
                    "dark": "resources/dark/x-box.svg"
                }
            },
            {
                "command": "textView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "findView.clearAll",
                "title": "Clear All",
                "icon": {
                    "light": "resources/light/close.svg",
                    "dark": "resources/dark/close.svg"
                }
            },
            {
                "command": "findView.refreshAll",
                "title": "Finds",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "textView.openText",
                "title": "Open Text",
                "icon": {
                    "light": "resources/light/document.svg",
                    "dark": "resources/dark/document.svg"
                }
            },
            {
                "command": "analyzerView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "outputView.rename",
                "title": "Rename File",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "outputView.explore",
                "title": "Explore Output Folder",
                "icon": {
                    "light": "resources/light/gear.svg",
                    "dark": "resources/dark/gear.svg"
                }
            },
            {
                "command": "outputView.deleteOrphans",
                "title": "Delete Orphans",
                "icon": {
                    "light": "resources/light/gear.svg",
                    "dark": "resources/dark/gear.svg"
                }
            },
            {
                "command": "outputView.orphanPasses",
                "title": "Orphan Passes",
                "icon": {
                    "light": "resources/light/gear.svg",
                    "dark": "resources/dark/gear.svg"
                }
            },
            {
                "command": "outputView.deleteOutput",
                "title": "Delete File",
                "icon": {
                    "light": "resources/light/close.svg",
                    "dark": "resources/dark/close.svg"
                }
            },
            {
                "command": "outputView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "outputView.kb",
                "title": "Display KB Files",
                "icon": {
                    "light": "resources/light/kb.svg",
                    "dark": "resources/dark/kb.svg"
                }
            },
            {
                "command": "outputView.matches",
                "title": "Display Rule Match Files",
                "icon": {
                    "light": "resources/light/symbol-keyword.svg",
                    "dark": "resources/dark/symbol-keyword.svg"
                }
            },
            {
                "command": "outputView.trees",
                "title": "Display Trees",
                "icon": {
                    "light": "resources/light/tree.svg",
                    "dark": "resources/dark/tree.svg"
                }
            },
            {
                "command": "outputView.all",
                "title": "Display Output Files",
                "icon": {
                    "light": "resources/light/document.svg",
                    "dark": "resources/dark/document.svg"
                }
            },
            {
                "command": "outputView.copytoText",
                "title": "Copy file to Analyzer Text",
                "icon": {
                    "light": "resources/light/text-copyto.svg",
                    "dark": "resources/dark/text-copyto.svg"
                }
            },
            {
                "command": "outputView.copytoKB",
                "title": "Copy file to Analyzer KB",
                "icon": {
                    "light": "resources/light/kb-copyto.svg",
                    "dark": "resources/dark/kb-copyto.svg"
                }
            },
            {
                "command": "logView.enginePath",
                "title": "Engine path to clipboard",
                "icon": {
                    "light": "resources/light/log.svg",
                    "dark": "resources/dark/log.svg"
                }
            },
            {
                "command": "logView.analyzerOuts",
                "title": "Display Analyzer Output Files",
                "icon": {
                    "light": "resources/light/log.svg",
                    "dark": "resources/dark/log.svg"
                }
            },
            {
                "command": "logView.updateDebug",
                "title": "Toggle Update Trace",
                "icon": {
                    "light": "resources/light/folder.svg",
                    "dark": "resources/dark/folder.svg"
                }
            },
            {
                "command": "logView.checkUpdates",
                "title": "Check for updates",
                "icon": {
                    "light": "resources/light/folder.svg",
                    "dark": "resources/dark/folder.svg"
                }
            },
            {
                "command": "logView.updaterHelp",
                "title": "Help: Updater Timeout",
                "icon": {
                    "light": "resources/light/folder.svg",
                    "dark": "resources/dark/folder.svg"
                }
            },
            {
                "command": "logView.downloadHelp",
                "title": "Help: Download Error",
                "icon": {
                    "light": "resources/light/folder.svg",
                    "dark": "resources/dark/folder.svg"
                }
            },
            {
                "command": "logView.exploreEngineDir",
                "title": "Explore Engine Folder",
                "icon": {
                    "light": "resources/light/folder.svg",
                    "dark": "resources/dark/folder.svg"
                }
            },
            {
                "command": "logView.conceptualGrammar",
                "title": "KB",
                "icon": {
                    "light": "resources/light/kb.svg",
                    "dark": "resources/dark/kb.svg"
                }
            },
            {
                "command": "logView.stopUpdater",
                "title": "Stop update",
                "icon": {
                    "light": "resources/light/cancel-button.svg",
                    "dark": "resources/dark/cancel-button.svg"
                }
            },
            {
                "command": "logView.stopFileOps",
                "title": "Stop file operations",
                "icon": {
                    "light": "resources/light/cancel-button.svg",
                    "dark": "resources/dark/cancel-button.svg"
                }
            },
            {
                "command": "logView.matches",
                "title": "Rule Matches",
                "icon": {
                    "light": "resources/light/symbol-keyword.svg",
                    "dark": "resources/dark/symbol-keyword.svg"
                }
            },
            {
                "command": "logView.timing",
                "title": "Timings",
                "icon": {
                    "light": "resources/light/watch.svg",
                    "dark": "resources/dark/watch.svg"
                }
            },
            {
                "command": "logView.setClearFlag",
                "title": "Clear"
            },
            {
                "command": "logView.clear",
                "title": "Clear",
                "icon": {
                    "light": "resources/light/close.svg",
                    "dark": "resources/dark/close.svg"
                }
            },
            {
                "command": "logView.makeAna",
                "title": "Analyzer Log Output",
                "icon": {
                    "light": "resources/light/gear.svg",
                    "dark": "resources/dark/gear.svg"
                }
            }
        ],
        "keybindings": [
            {
                "command": "textView.analyzerCurrent",
                "key": "f5",
                "mac": "f5"
            },
            {
                "command": "nlp.duplicateLine",
                "key": "ctrl+shift+D",
                "mac": "cmd+shift+D",
                "when": "resourceLangId == nlp || resourceLangId == dict"
            },
            {
                "command": "log.foldAll",
                "key": "ctrl+shift+F",
                "mac": "cmd+shift+F",
                "when": "resourceLangId == tree"
            },
            {
                "command": "log.unfoldAll",
                "key": "ctrl+shift+U",
                "mac": "cmd+shift+U",
                "when": "resourceLangId == tree"
            },
            {
                "command": "sequenceView.finalTree",
                "key": "ctrl+shift+F",
                "mac": "cmd+shift+F",
                "when": "resourceLangId == nlp"
            },
            {
                "command": "nlp.reformatRule",
                "key": "ctrl+shift+R",
                "mac": "cmd+shift+R",
                "when": "resourceLangId == nlp"
            },
            {
                "command": "nlp.reformatOneLine",
                "key": "ctrl+shift+Q",
                "mac": "cmd+shift+Q",
                "when": "resourceLangId == nlp"
            },
            {
                "command": "nlp.reformatParens",
                "key": "ctrl+shift+A",
                "mac": "cmd+shift+A",
                "when": "resourceLangId == nlp"
            },
            {
                "command": "nlp.passTree",
                "key": "ctrl+shift+T",
                "mac": "cmd+shift+T",
                "when": "resourceLangId == nlp"
            }
        ],
        "submenus": [
            {
                "id": "sequencetype",
                "label": "New Pass"
            },
            {
                "id": "librarypass",
                "label": "Library Pass"
            }
        ],
        "menus": {
            "explorer/context": [
                {
                    "when": "resourceLangId == nlp && resourceExtname == .txt",
                    "command": "nlp.analyze",
                    "group": "sequence"
                }
            ],
            "editor/title": [
                {
                    "command": "nlp.video",
                    "group": "navigation"
                }
            ],
            "editor/context": [
                {
                    "when": "resourceExtname == .txt",
                    "command": "nlp.analyze",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txt",
                    "command": "sequenceView.finalTree",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txt || resourceExtname == .nlp || resourceExtname == .dict",
                    "command": "nlp.sortText",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txt || resourceExtname == .nlp || resourceExtname == .dict || resourceExtname == .kbb",
                    "command": "nlp.lowerCase",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txt || resourceExtname == .nlp || resourceExtname == .dict || resourceExtname == .kbb",
                    "command": "nlp.removeAccents",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt",
                    "command": "nlp.ruleFired",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .nlp || resourceExtname == .pat",
                    "command": "nlp.copyContext",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt || resourceExtname == .txt",
                    "command": "nlp.openSelTree",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt || resourceExtname == .txt || resourceExtname == .nlp || resourceExtname == .pat",
                    "command": "nlp.generateRule",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt || resourceExtname == .txt || resourceExtname == .nlp || resourceExtname == .pat",
                    "command": "nlp.generateExactRule",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt",
                    "command": "nlp.openPassFile",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt",
                    "command": "nlp.passTree",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.reformatRule",
                    "group": "anlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.reformatOneLine",
                    "group": "anlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.reformatParens",
                    "group": "anlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.duplicateLine",
                    "group": "anlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.commentLines",
                    "group": "anlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.searchWord",
                    "group": "anlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.goToFunction",
                    "group": "anlp"
                },
                {
                    "when": "isWindows && resourceExtname == .nlp",
                    "command": "helpView.windowCHMHelp",
                    "group": "help"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "sequenceView.finalTree",
                    "group": "bnlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.passTree",
                    "group": "bnlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.displayMatchedRules",
                    "group": "bnlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "helpView.openOnlineFunctionHelp",
                    "group": "help"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "helpView.openOnlineVariableHelp",
                    "group": "help"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "helpView.lookup",
                    "group": "help"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "helpView.lookupBrowser",
                    "group": "help"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.selectSequence",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .log || resourceExtname == .tree || resourceExtname == .kbb",
                    "command": "log.foldAll",
                    "group": "fold"
                },
                {
                    "when": "resourceExtname == .log || resourceExtname == .tree || resourceExtname == .kbb",
                    "command": "log.unfoldAll",
                    "group": "fold"
                },
                {
                    "when": "resourceExtname == .log || resourceExtname == .tree || resourceExtname == .kbb",
                    "command": "log.foldRecursively",
                    "group": "fold"
                },
                {
                    "when": "resourceExtname == .log || resourceExtname == .tree || resourceExtname == .kbb",
                    "command": "log.unfoldRecursively",
                    "group": "fold"
                },
                {
                    "when": "resourceExtname == .log || resourceExtname == .tree",
                    "command": "log.highlightText",
                    "group": "display"
                },
                {
                    "when": "resourceExtname == .log || resourceExtname == .tree",
                    "command": "log.ruleFired",
                    "group": "display"
                },
                {
                    "when": "resourceExtname == .log || resourceExtname == .tree",
                    "command": "log.generatePath",
                    "group": "display"
                },
                {
                    "when": "resourceFilename != final.tree && resourceExtname == .tree",
                    "command": "log.openPassFile",
                    "group": "display"
                }
            ],
            "view/title": [
                {
                    "command": "kbView.cleanFiles",
                    "when": "view == kbView",
                    "group": "navigation@0"
                },
                {
                    "command": "kbView.newDictFile",
                    "when": "view == kbView",
                    "group": "navigation@1"
                },
                {
                    "command": "kbView.newKBBFile",
                    "when": "view == kbView",
                    "group": "navigation@2"
                },
                {
                    "command": "kbView.search",
                    "when": "view == kbView && viewItem != 'empty'",
                    "group": "navigation@3"
                },
                {
                    "command": "kbView.refreshAll",
                    "when": "view == kbView",
                    "group": "navigation@4"
                },
                {
                    "command": "kbView.video",
                    "when": "view == kbView",
                    "group": "navigation@6"
                },
                {
                    "command": "kbView.langLibs",
                    "when": "view == kbView",
                    "group": "second@1"
                },
                {
                    "command": "kbView.miscLibs",
                    "when": "view == kbView",
                    "group": "second@2"
                },
                {
                    "command": "kbView.modCreate",
                    "when": "view == kbView && viewItem != 'empty'",
                    "group": "second@3"
                },
                {
                    "command": "textView.deleteAnalyzerLogs",
                    "when": "view == textView && text.hasLogs",
                    "group": "navigation@0"
                },
                {
                    "command": "textView.search",
                    "when": "view == textView",
                    "group": "navigation@1"
                },
                {
                    "command": "textView.newDirTop",
                    "when": "view == textView",
                    "group": "navigation@2"
                },
                {
                    "command": "textView.newTextTop",
                    "when": "view == textView",
                    "group": "navigation@3"
                },
                {
                    "command": "textView.refreshAll",
                    "when": "view == textView",
                    "group": "navigation@4"
                },
                {
                    "command": "textView.fastLoad",
                    "when": "view == textView && !textView.fastload",
                    "group": "secondary@0"
                },
                {
                    "command": "textView.fastLoadOff",
                    "when": "view == textView && textView.fastload",
                    "group": "secondary@0"
                },
                {
                    "command": "textView.analyzerCurrent",
                    "when": "view == textView",
                    "group": "secondary@1"
                },
                {
                    "command": "textView.importFiles",
                    "when": "view == textView",
                    "group": "secondary@2"
                },
                {
                    "command": "textView.existingFolder",
                    "when": "view == textView",
                    "group": "secondary@3"
                },
                {
                    "command": "sequenceView.convert",
                    "when": "view == sequenceView && sequence.hasPat",
                    "group": "navigation@0"
                },
                {
                    "command": "sequenceView.finalTree",
                    "when": "view == sequenceView",
                    "group": "navigation@1"
                },
                {
                    "command": "sequenceView.search",
                    "when": "view == sequenceView",
                    "group": "navigation@2"
                },
                {
                    "command": "sequenceView.searchTop",
                    "when": "view == sequenceView",
                    "group": "navigation@3"
                },
                {
                    "command": "sequenceView.refreshAll",
                    "when": "view == sequenceView",
                    "group": "navigation@4"
                },
                {
                    "command": "sequenceView.modAdd",
                    "when": "view == sequenceView",
                    "group": "secondary@1"
                },
                {
                    "command": "sequenceView.video",
                    "when": "view == sequenceView",
                    "group": "secondary@2"
                },
                {
                    "command": "outputView.all",
                    "when": "view == outputView",
                    "group": "navigation@0"
                },
                {
                    "command": "outputView.kb",
                    "when": "view == outputView",
                    "group": "navigation@1"
                },
                {
                    "command": "outputView.matches",
                    "when": "view == outputView",
                    "group": "navigation@02"
                },
                {
                    "command": "outputView.trees",
                    "when": "view == outputView",
                    "group": "navigation@03"
                },
                {
                    "command": "outputView.orphanPasses",
                    "when": "view == outputView",
                    "group": "navigation@4"
                },
                {
                    "command": "outputView.refreshAll",
                    "when": "view == outputView",
                    "group": "navigation@5"
                },
                {
                    "command": "outputView.video",
                    "when": "view == outputView",
                    "group": "navigation@6"
                },
                {
                    "command": "logView.stopUpdater",
                    "when": "view == logView && updating.running",
                    "group": "navigation@1"
                },
                {
                    "command": "logView.stopFileOps",
                    "when": "view == logView && fileOps.running",
                    "group": "navigation@2"
                },
                {
                    "command": "logView.analyzerOuts",
                    "when": "view == logView",
                    "group": "navigation@3"
                },
                {
                    "command": "logView.makeAna",
                    "when": "view == logView",
                    "group": "navigation@4"
                },
                {
                    "command": "logView.conceptualGrammar",
                    "when": "view == logView",
                    "group": "navigation@5"
                },
                {
                    "command": "logView.timing",
                    "when": "view == logView",
                    "group": "navigation@6"
                },
                {
                    "command": "logView.clear",
                    "when": "view == logView",
                    "group": "navigation@7"
                },
                {
                    "command": "logView.updateDebug",
                    "when": "view == logView",
                    "group": "third"
                },
                {
                    "command": "logView.checkUpdates",
                    "when": "view == logView",
                    "group": "third"
                },
                {
                    "command": "logView.enginePath",
                    "when": "view == logView",
                    "group": "secondary"
                },
                {
                    "command": "logView.exploreEngineDir",
                    "when": "view == logView",
                    "group": "secondary"
                },
                {
                    "command": "logView.updaterHelp",
                    "when": "view == logView",
                    "group": "help"
                },
                {
                    "command": "logView.downloadHelp",
                    "when": "view == logView",
                    "group": "help"
                },
                {
                    "command": "analyzerView.deleteAllAnalyzerLogs",
                    "when": "view == analyzerView && analyzers.hasLogs",
                    "group": "navigation@0"
                },
                {
                    "command": "analyzerView.newFolder",
                    "when": "view == analyzerView",
                    "group": "navigation@1"
                },
                {
                    "command": "analyzerView.newAnalyzer",
                    "when": "view == analyzerView",
                    "group": "navigation@2"
                },
                {
                    "command": "analyzerView.refreshAll",
                    "when": "view == analyzerView",
                    "group": "navigation@3"
                },
                {
                    "command": "analyzerView.loadExampleAnalyzers",
                    "when": "view == analyzerView",
                    "group": "navigation@4"
                },
                {
                    "command": "analyzerView.video",
                    "when": "view == analyzerView",
                    "group": "navigation@5"
                },
                {
                    "command": "analyzerView.copyAll",
                    "when": "view == analyzerView",
                    "group": "secondary"
                },
                {
                    "command": "analyzerView.importAnalyzers",
                    "when": "view == analyzerView",
                    "group": "secondary"
                },
                {
                    "command": "analyzerView.updateColorizer",
                    "when": "view == analyzerView",
                    "group": "secondary"
                },
                {
                    "command": "analyzerView.exploreAll",
                    "when": "view == analyzerView",
                    "group": "secondary"
                },
                {
                    "command": "findView.clearAll",
                    "when": "view == findView",
                    "group": "navigation"
                },
                {
                    "command": "findView.refreshAll",
                    "when": "view == findView",
                    "group": "navigation"
                }
            ],
            "sequencetype": [
                {
                    "command": "sequenceView.insertNew",
                    "group": "edit@1"
                },
                {
                    "command": "sequenceView.insertCode",
                    "group": "edit@2"
                },
                {
                    "command": "sequenceView.insertDecl",
                    "group": "edit@3"
                }
            ],
            "librarypass": [
                {
                    "command": "sequenceView.libraryKBFuncs",
                    "group": "edit@1"
                },
                {
                    "command": "sequenceView.libraryTreeFuncs",
                    "group": "edit@1"
                },
                {
                    "command": "sequenceView.libraryUtilFuncs",
                    "group": "edit@2"
                },
                {
                    "command": "sequenceView.libraryLines",
                    "group": "edit@3"
                },
                {
                    "command": "sequenceView.libraryLinesDictTokZ",
                    "group": "edit@4"
                },
                {
                    "command": "sequenceView.libraryWhiteSpaces",
                    "group": "edit@5"
                },
                {
                    "command": "sequenceView.insertLibrary",
                    "group": "edit@6"
                }
            ],
            "view/item/context": [
                {
                    "command": "outputView.rename",
                    "when": "view == outputView",
                    "group": "navigation"
                },
                {
                    "command": "outputView.editTest",
                    "when": "view == outputView && viewItem =~ /.*test.*/",
                    "group": "navigation"
                },
                {
                    "command": "outputView.deleteTest",
                    "when": "view == outputView && viewItem =~ /.*test.*/",
                    "group": "navigation"
                },
                {
                    "command": "outputView.deleteOrphans",
                    "when": "view == outputView",
                    "group": "navigation"
                },
                {
                    "command": "outputView.explore",
                    "when": "view == outputView",
                    "group": "navigation"
                },
                {
                    "command": "kbView.langLibs",
                    "when": "view == kbView",
                    "group": "atop@2"
                },
                {
                    "command": "kbView.miscLibs",
                    "when": "view == kbView",
                    "group": "atop@2"
                },
                {
                    "command": "kbView.rename",
                    "when": "view == kbView && viewItem != 'empty'",
                    "group": "navigation"
                },
                {
                    "command": "kbView.existingFiles",
                    "when": "view == kbView",
                    "group": "navigation"
                },
                {
                    "command": "kbView.explore",
                    "when": "view == kbView",
                    "group": "navigation"
                },
                {
                    "command": "kbView.mergeDicts",
                    "when": "view == kbView && viewItem != 'empty'",
                    "group": "special"
                },
                {
                    "command": "kbView.generateMain",
                    "when": "view == kbView && viewItem != 'empty'",
                    "group": "special"
                },
                {
                    "command": "kbView.deleteFile",
                    "when": "view == kbView && viewItem != 'empty'",
                    "group": "navigation"
                },
                {
                    "command": "kbView.cleanFiles",
                    "when": "view == kbView && viewItem != 'empty'",
                    "group": "navigation"
                },
                {
                    "command": "kbView.modAdd",
                    "when": "view == kbView && viewItem =~ /.*nomo.*/",
                    "group": "navigation"
                },
                {
                    "command": "kbView.modLoad",
                    "when": "view == kbView && viewItem =~ /.*mod.*/",
                    "group": "navigation"
                },
                {
                    "command": "kbView.copyToAnalyzer",
                    "when": "view == kbView && viewItem != 'empty'",
                    "group": "inline@0"
                },
                {
                    "command": "kbView.modAdd",
                    "when": "view == kbView && viewItem =~ /.*nomo.*/",
                    "group": "inline@1"
                },
                {
                    "command": "kbView.modLoad",
                    "when": "view == kbView && viewItem =~ /.*mod.*/",
                    "group": "inline@2"
                },
                {
                    "command": "kbView.rename",
                    "when": "view == kbView && viewItem != 'empty'",
                    "group": "inline@3"
                },
                {
                    "command": "kbView.deleteFile",
                    "when": "view == kbView && viewItem != 'empty'",
                    "group": "inline@4"
                },
                {
                    "command": "kbView.toggleActive",
                    "when": "view == kbView && viewItem =~ /.*toggle.*/",
                    "group": "inline@5"
                },
                {
                    "command": "kbView.newKBBFile",
                    "when": "view == kbView",
                    "group": "new"
                },
                {
                    "command": "kbView.newDictFile",
                    "when": "view == kbView",
                    "group": "new"
                },
                {
                    "submenu": "sequencetype",
                    "when": "view == sequenceView",
                    "group": "atop@0"
                },
                {
                    "submenu": "librarypass",
                    "when": "view == sequenceView",
                    "group": "atop@1"
                },
                {
                    "command": "sequenceView.insert",
                    "when": "view == sequenceView",
                    "group": "atop@2"
                },
                {
                    "command": "sequenceView.insertSister",
                    "when": "view == sequenceView",
                    "group": "atop@3"
                },
                {
                    "command": "sequenceView.insertOrphan",
                    "when": "view == sequenceView",
                    "group": "atop@4"
                },
                {
                    "command": "sequenceView.insertAnalyzerBlock",
                    "when": "view == sequenceView && viewItem =~ /.*outside.*/",
                    "group": "atop@5"
                },
                {
                    "command": "sequenceView.newFolder",
                    "when": "view == sequenceView && viewItem =~ /.*outside.*/",
                    "group": "atop@6"
                },
                {
                    "command": "sequenceView.compareSisters",
                    "when": "view == sequenceView && viewItem =~ /.*sister.*/",
                    "group": "atop@7"
                },
                {
                    "command": "sequenceView.compareLibrary",
                    "when": "view == sequenceView && viewItem =~ /.*library.*/",
                    "group": "atop@8"
                },
                {
                    "command": "sequenceView.copyContext",
                    "when": "view == sequenceView",
                    "group": "atop@9"
                },
                {
                    "command": "sequenceView.openPass",
                    "when": "view == sequenceView && viewItem =~ /.*file.*/",
                    "group": "display"
                },
                {
                    "command": "sequenceView.search",
                    "when": "view == sequenceView && viewItem =~ /.*file.*/",
                    "group": "display"
                },
                {
                    "command": "sequenceView.searchTop",
                    "when": "view == sequenceView && viewItem =~ /.*file.*/",
                    "group": "display"
                },
                {
                    "command": "sequenceView.explore",
                    "when": "view == sequenceView",
                    "group": "display"
                },
                {
                    "command": "sequenceView.openTree",
                    "when": "view == sequenceView && viewItem =~ /.*hasLog.*/",
                    "group": "display"
                },
                {
                    "command": "sequenceView.displayMatchedRules",
                    "when": "view == sequenceView && viewItem =~ /.*hasLog.*/",
                    "group": "display"
                },
                {
                    "command": "sequenceView.openKB",
                    "when": "view == sequenceView && viewItem =~ /.*hasLog.*/",
                    "group": "display"
                },
                {
                    "command": "sequenceView.tokenize",
                    "when": "view == sequenceView && viewItem =~ /.*tokenize.*/",
                    "group": "tokenize"
                },
                {
                    "command": "sequenceView.dicttok",
                    "when": "view == sequenceView && viewItem =~ /.*tokenize.*/",
                    "group": "tokenize"
                },
                {
                    "command": "sequenceView.dicttokz",
                    "when": "view == sequenceView && viewItem =~ /.*tokenize.*/",
                    "group": "tokenize"
                },
                {
                    "command": "sequenceView.chartok",
                    "when": "view == sequenceView && viewItem =~ /.*tokenize.*/",
                    "group": "tokenize"
                },
                {
                    "command": "sequenceView.cmltok",
                    "when": "view == sequenceView && viewItem =~ /.*tokenize.*/",
                    "group": "tokenize"
                },
                {
                    "command": "sequenceView.moveUp",
                    "when": "view == sequenceView && viewItem =~ /.*mvup.*/",
                    "group": "move"
                },
                {
                    "command": "sequenceView.moveDown",
                    "when": "view == sequenceView && viewItem =~ /.*mvdown.*/",
                    "group": "move"
                },
                {
                    "command": "sequenceView.renameFolder",
                    "when": "view == sequenceView && viewItem =~ /.*folder.*/",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.rename",
                    "when": "view == sequenceView && viewItem =~ /.*file.*/",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.deleteFolder",
                    "when": "view == sequenceView && viewItem =~ /.*folder.*/",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.delete",
                    "when": "view == sequenceView && viewItem =~ /.*file.*/",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.duplicate",
                    "when": "view == sequenceView && viewItem =~ /.*file.*/",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.typePat",
                    "when": "view == sequenceView && viewItem =~ /.*file.*/",
                    "group": "attribute"
                },
                {
                    "command": "sequenceView.typeRec",
                    "when": "view == sequenceView && viewItem =~ /.*file.*/",
                    "group": "attribute"
                },
                {
                    "command": "sequenceView.typeOn",
                    "when": "view == sequenceView && viewItem =~ /.*file.*/",
                    "group": "attribute"
                },
                {
                    "command": "sequenceView.typeOff",
                    "when": "view == sequenceView && viewItem =~ /.*file.*/",
                    "group": "attribute"
                },
                {
                    "command": "textView.explore",
                    "when": "view == textView",
                    "group": "folder"
                },
                {
                    "command": "textView.exploreAll",
                    "when": "view == textView",
                    "group": "folder"
                },
                {
                    "command": "textView.propertiesFile",
                    "when": "view == textView && viewItem =~ /file/",
                    "group": "arun"
                },
                {
                    "command": "textView.propertiesFolder",
                    "when": "view == textView && viewItem =~ /dir/",
                    "group": "arun"
                },
                {
                    "command": "textView.openText",
                    "when": "view == textView && viewItem =~ /.*file.*/",
                    "group": "arun"
                },
                {
                    "command": "textView.analyze",
                    "when": "view == textView && viewItem =~ /.*file.*/",
                    "group": "arun"
                },
                {
                    "command": "textView.convert",
                    "when": "view == textView && viewItem =~ /dirHasNonText/",
                    "group": "arun"
                },
                {
                    "command": "textView.search",
                    "when": "view == textView",
                    "group": "arun"
                },
                {
                    "command": "textView.python",
                    "when": "view == textView",
                    "group": "file"
                },
                {
                    "command": "textView.deleteFileLogs",
                    "when": "view == textView && viewItem =~ /.*HasLogs.*/",
                    "group": "file"
                },
                {
                    "command": "textView.rename",
                    "when": "view == textView && viewItem =~ /file/",
                    "group": "file"
                },
                {
                    "command": "textView.modAdd",
                    "when": "view == textView && viewItem =~ /file/",
                    "group": "file"
                },
                {
                    "command": "textView.deleteDir",
                    "when": "view == textView && viewItem =~ /dir/",
                    "group": "zdir"
                },
                {
                    "command": "textView.renameDir",
                    "when": "view == textView && viewItem =~ /dir/",
                    "group": "zdir"
                },
                {
                    "command": "textView.newDirTop",
                    "when": "view == textView",
                    "group": "zdir"
                },
                {
                    "command": "textView.newDir",
                    "when": "view == textView",
                    "group": "zdir"
                },
                {
                    "command": "textView.existingFolder",
                    "when": "view == textView",
                    "group": "zdir"
                },
                {
                    "command": "textView.splitDir",
                    "when": "view == textView && viewItem =~ /dir/",
                    "group": "zdir"
                },
                {
                    "command": "textView.newText",
                    "when": "view == textView",
                    "group": "file"
                },
                {
                    "command": "textView.newTextTop",
                    "when": "view == textView",
                    "group": "file"
                },
                {
                    "command": "textView.importFiles",
                    "when": "view == textView",
                    "group": "file"
                },
                {
                    "command": "textView.deleteFile",
                    "when": "view == textView && viewItem =~ /.*file.*/",
                    "group": "file"
                },
                {
                    "command": "textView.runTest",
                    "when": "view == textView && viewItem =~ /.*test.*/",
                    "group": "test"
                },
                {
                    "command": "textView.editTest",
                    "when": "view == textView && viewItem =~ /.*test.*/ && viewItem =~ /.*file.*/",
                    "group": "test"
                },
                {
                    "command": "textView.deleteTest",
                    "when": "view == textView && viewItem =~ /.*test.*/ && viewItem =~ /.*file.*/",
                    "group": "test"
                },
                {
                    "command": "textView.moveToFolder",
                    "when": "view == textView",
                    "group": "folder"
                },
                {
                    "command": "textView.moveUp",
                    "when": "view == textView",
                    "group": "folder"
                },
                {
                    "command": "analyzerView.renameAnalyzer",
                    "when": "view == analyzerView && viewItem =~ /.*isAnalyzer.*/",
                    "group": "inline"
                },
                {
                    "command": "analyzerView.renameFile",
                    "when": "view == analyzerView && viewItem =~ /.*isFile.*/",
                    "group": "inline"
                },
                {
                    "command": "analyzerView.renameFolder",
                    "when": "view == analyzerView && viewItem =~ /.*isFolder.*/",
                    "group": "inline"
                },
                {
                    "command": "analyzerView.readMe",
                    "when": "view == analyzerView && viewItem =~ /.*readMe.*/",
                    "group": "inline"
                },
                {
                    "command": "analyzerView.manifestGenerate",
                    "when": "view == analyzerView && viewItem =~ /.*isECL.*/",
                    "group": "ecl"
                },
                {
                    "command": "analyzerView.newECLFile",
                    "when": "view == analyzerView",
                    "group": "ecl"
                },
                {
                    "command": "analyzerView.moveDownFolder",
                    "when": "view == analyzerView && viewItem =~ /.*isFolder.*/",
                    "group": "movefolder"
                },
                {
                    "command": "analyzerView.moveToParent",
                    "when": "view == analyzerView && viewItem =~ /.*isAnalyzer.*/",
                    "group": "movefolder"
                },
                {
                    "command": "analyzerView.deleteReadMe",
                    "when": "view == analyzerView && viewItem =~ /.*isAnalyzer.*/",
                    "group": "readme"
                },
                {
                    "command": "analyzerView.createReadMe",
                    "when": "view == analyzerView && !(viewItem =~ /.*isAnalyzer.*/)",
                    "group": "readme"
                },
                {
                    "command": "analyzerView.editReadMe",
                    "when": "view == analyzerView && viewItem =~ /.*isAnalyzer.*/",
                    "group": "readme"
                },
                {
                    "command": "analyzerView.readMe",
                    "when": "view == analyzerView && viewItem =~ /.*isAnalyzer.*/",
                    "group": "readme"
                },
                {
                    "command": "analyzerView.newFolder",
                    "when": "view == analyzerView",
                    "group": "folder"
                },
                {
                    "command": "analyzerView.moveToFolder",
                    "when": "view == analyzerView",
                    "group": "folder"
                },
                {
                    "command": "analyzerView.moveUp",
                    "when": "view == analyzerView && viewItem =~ /.*moveUp.*/",
                    "group": "folder"
                },
                {
                    "command": "analyzerView.explore",
                    "when": "view == analyzerView",
                    "group": "folder"
                },
                {
                    "command": "analyzerView.renameFolder",
                    "when": "view == analyzerView && viewItem =~ /.*isFolder.*/",
                    "group": "folder"
                },
                {
                    "command": "analyzerView.renameFile",
                    "when": "view == analyzerView && viewItem =~ /.*isFile.*/",
                    "group": "file"
                },
                {
                    "command": "analyzerView.deleteFile",
                    "when": "view == analyzerView && viewItem =~ /.*isFile.*/",
                    "group": "file"
                },
                {
                    "command": "analyzerView.renameAnalyzer",
                    "when": "view == analyzerView && viewItem =~ /.*isAnalyzer.*/",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.deleteAnalyzer",
                    "when": "view == analyzerView && viewItem =~ /.*isAnalyzer.*/",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.newAnalyzer",
                    "when": "view == analyzerView",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.copyAnalyzer",
                    "when": "view == analyzerView && viewItem =~ /.*isAnalyzer.*/",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.importAnalyzers",
                    "when": "view == analyzerView",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.dupeAnalyzer",
                    "when": "view == analyzerView && viewItem =~ /.*isAnalyzer.*/",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.deleteAnalyzerLogs",
                    "when": "view == analyzerView && viewItem =~ /.*hasLogs.*/",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.updateColorizer",
                    "when": "view == analyzerView",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.deleteAnalyzerLogs",
                    "when": "view == analyzerView && viewItem =~ /.*hasLogs.*/",
                    "group": "inline@0"
                },
                {
                    "command": "analyzerView.dupeAnalyzer",
                    "when": "view == analyzerView && viewItem =~ /.*isAnalyzer.*/",
                    "group": "inline@1"
                },
                {
                    "command": "analyzerView.moveToFolder",
                    "when": "view == analyzerView && viewItem =~ /moveDown/",
                    "group": "inline@2"
                },
                {
                    "command": "analyzerView.moveUp",
                    "when": "view == analyzerView && viewItem =~ /moveUp/",
                    "group": "inline@3"
                },
                {
                    "command": "analyzerView.deleteAnalyzer",
                    "when": "view == analyzerView && viewItem =~ /.*isAnalyzer.*/",
                    "group": "inline@4"
                },
                {
                    "command": "analyzerView.deleteFolder",
                    "when": "view == analyzerView && viewItem =~ /.*isFolder.*/",
                    "group": "inline@5"
                },
                {
                    "command": "analyzerView.deleteFile",
                    "when": "view == analyzerView && !(viewItem =~ /.*isAnalyzer.*/) && !(viewItem =~ /.*isFolder.*/)",
                    "group": "inline@5"
                },
                {
                    "command": "sequenceView.insertNew",
                    "when": "view == sequenceView && viewItem =~ /stub|folder|tokenize/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.openTree",
                    "when": "view == sequenceView && viewItem =~ /hasLog/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.displayMatchedRules",
                    "when": "view == sequenceView && viewItem =~ /.*hasLog.*/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.openKB",
                    "when": "view == sequenceView && viewItem =~ /hasKB|hasLoghasKB/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.moveUp",
                    "when": "view == sequenceView && viewItem =~ /.*mvup.*/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.moveDown",
                    "when": "view == sequenceView && viewItem =~ /.*mvdown.*/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.toggleActive",
                    "when": "view == sequenceView && viewItem =~ /hasKB|hasLoghasKB|hasLog|file|folder/",
                    "group": "inline"
                },
                {
                    "command": "textView.analyzeDir",
                    "when": "view == textView && viewItem =~ /.*dir.*/",
                    "group": "inline@01"
                },
                {
                    "command": "textView.analyze",
                    "when": "view == textView && viewItem =~ /.*file.*/",
                    "group": "inline@02"
                },
                {
                    "command": "textView.deleteFileLogs",
                    "when": "view == textView && viewItem =~ /.*HasLogs.*/",
                    "group": "inline@03"
                },
                {
                    "command": "textView.copyToAnalyzer",
                    "when": "view == textView",
                    "group": "inline@04"
                },
                {
                    "command": "textView.newDir",
                    "when": "view == textView && viewItem =~ /.*dir.*/",
                    "group": "inline@05"
                },
                {
                    "command": "textView.newText",
                    "when": "view == textView && viewItem =~ /.*dir.*/",
                    "group": "inline@06"
                },
                {
                    "command": "textView.deleteDir",
                    "when": "view == textView && viewItem =~ /.*dir.*/",
                    "group": "inline@07"
                },
                {
                    "command": "textView.deleteFile",
                    "when": "view == textView && viewItem =~ /.*file.*/",
                    "group": "inline@08"
                },
                {
                    "command": "textView.moveUp",
                    "when": "view == textView && viewItem =~ /.*moveUp.*/",
                    "group": "inline@09"
                },
                {
                    "command": "textView.moveToFolder",
                    "when": "view == textView && viewItem =~ /.*moveDown.*/",
                    "group": "inline@10"
                },
                {
                    "command": "outputView.copytoText",
                    "when": "view == outputView",
                    "group": "inline@0"
                },
                {
                    "command": "outputView.copytoKB",
                    "when": "view == outputView",
                    "group": "inline@1"
                },
                {
                    "command": "outputView.addTest",
                    "when": "view == outputView",
                    "group": "inline@2"
                },
                {
                    "command": "outputView.runTest",
                    "when": "view == outputView && viewItem =~ /.*test.*/",
                    "group": "inline@3"
                },
                {
                    "command": "outputView.deleteOutput",
                    "when": "view == outputView",
                    "group": "inline@4"
                }
            ]
        },
        "configuration": {
            "type": "object",
            "title": "NLP",
            "properties": {
                "update.auto": {
                    "type": "boolean",
                    "scope": "application",
                    "default": true,
                    "description": "Auto update on load or reload"
                },
                "textView.fast": {
                    "type": "boolean",
                    "scope": "application",
                    "default": false,
                    "description": "Load textview fast. Attributes for text files are lost such as has logs, etc."
                },
                "user.name": {
                    "type": "string",
                    "scope": "application",
                    "default": "",
                    "description": "User name for top pass file comments"
                },
                "analyzer.current": {
                    "type": "string",
                    "scope": "resource",
                    "default": "",
                    "description": "Current Analyzer"
                },
                "engine.visualtext": {
                    "type": "string",
                    "scope": "application",
                    "default": "",
                    "description": "VisualText files version"
                },
                "engine.analyzers": {
                    "type": "string",
                    "scope": "application",
                    "default": "",
                    "description": "Analyzers version"
                },
                "logs.clear": {
                    "type": "boolean",
                    "scope": "application",
                    "default": true,
                    "description": "Clear logs before new operations"
                }
            }
        }
    },
    "dependencies": {
        "copy-dir": "^1.3.0",
        "download-file": "^0.1.5",
        "extract-zip": "^2.0.1",
        "latest-version": "^7.0.0",
        "line-reader": "^0.4.0",
        "moment": "^2.29.4",
        "moment-duration-format": "^2.3.2",
        "n-readlines": "^1.0.1",
        "nodejs-file-downloader": "^4.7.3",
        "os": "^0.1.2",
        "readline": "^1.3.0",
        "rimraf": "^3.0.2",
        "tslib": "^2.3.1"
    },
    "scripts": {
        "package": "vsce package",
        "publish": "vsce publish",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "pretest": "npm run compile",
        "test": "node ./dist/test/runTest.js",
        "vsce-package": "vsce package -o ./vscode.nlp.vsix"
    },
    "devDependencies": {
        "@types/glob": "^7.2.0",
        "@types/mocha": "^5.2.7",
        "@types/moment-duration-format": "^2.2.3",
        "@types/node": "^12.20.47",
        "@types/vscode": "^1.65.0",
        "@vscode/vsce": "^2.15.0",
        "glob": "^7.2.0",
        "mocha": "^10.8.2",
        "tslint": "^5.20.0",
        "typescript": "^4.4.4",
        "vscode-test": "^1.6.1"
    }
}
