{
    "name": "nlp",
    "displayName": "NLP",
    "description": "NLP++ support for Visual Studio Code",
    "version": "0.0.1",
    "enableProposedApi": true,
    "engines": {
        "vscode": "^1.45.0"
    },
    "categories": [
        "Programming Languages",
        "Snippets",
        "Linters"
    ],
    "activationEvents": [
        "onLanguage:nlp",
        "onView:sequenceView"
    ],
    "main": "./out/extension.js",
    "contributes": {
        "views": {
            "visualText": [
                {
                    "id": "textView",
                    "name": "Text"
                },
                {
                    "id": "sequenceView",
                    "name": "Analyzer Sequence",
                    "icon": "fileicons/images/dark/dna.svg"
                }
            ],
            "vtOutput": [
                {
                    "id": "outputView",
                    "name": "Output Files",
                    "icon": "resources/dark/document.svg"
                },
                {
                    "id": "analyzerView",
                    "name": "Analyzers",
                    "icon": "fileicons/images/dark/gear.svg"
                },
                {
                    "id": "findView",
                    "name": "Find Results",
                    "icon": "fileicons/images/dark/search.svg"
                },
                {
                    "id": "logView",
                    "name": "Logging",
                    "icon": "fileicons/images/dark/error.svg"
                }
            ]
        },
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "visualText",
                    "title": "VisualText",
                    "icon": "resources/NLPIcon.svg"
                }
            ],
            "panel": [
                {
                    "id": "vtOutput",
                    "title": "VisualText",
                    "icon": "resources/dark/document.svg"
                }
            ]
        },
        "iconThemes": [
            {
                "id": "nlp",
                "label": "NLP Files",
                "path": "./fileicons/vs_nlp-icon-theme.json"
            }
        ],
        "languages": [
            {
                "id": "nlp",
                "aliases": [
                    "NLP++",
                    "nlp"
                ],
                "extensions": [
                    ".nlp",
                    ".nlppp",
                    ".pat"
                ],
                "configuration": "./nlp-configuration.json"
            },
            {
                "id": "seq",
                "extensions": [
                    ".seq"
                ],
                "aliases": [
                    ".SEQ",
                    ".seq"
                ],
                "configuration": "./seq-configuration.json"
            },
            {
                "id": "txxt",
                "extensions": [
                    ".txxt"
                ],
                "aliases": [
                    ".TXXT",
                    ".txxt"
                ],
                "configuration": "./txxt-configuration.json"
            },
            {
                "id": "tree",
                "extensions": [
                    ".log",
                    ".tree"
                ],
                "aliases": [
                    "LOG",
                    "log",
                    "TREE",
                    "tree"
                ],
                "configuration": "./tree-configuration.json"
            },
            {
                "id": "kb",
                "extensions": [
                    ".kb"
                ],
                "aliases": [
                    "KB",
                    "Kb",
                    "kb"
                ],
                "configuration": "./kb-configuration.json"
            },
            {
                "id": "kbb",
                "extensions": [
                    ".kbb"
                ],
                "aliases": [
                    "KBB",
                    "Kbb",
                    "kbb"
                ],
                "configuration": "./kbb-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "nlp",
                "scopeName": "source.nlp",
                "path": "./syntaxes/nlp.tmLanguage.json"
            },
            {
                "language": "seq",
                "scopeName": "source.seq",
                "path": "./syntaxes/seq.tmLanguage.json"
            },
            {
                "language": "txxt",
                "scopeName": "source.txxt",
                "path": "./syntaxes/txxt.tmLanguage.json"
            },
            {
                "language": "tree",
                "scopeName": "source.tree",
                "path": "./syntaxes/tree.tmLanguage.json"
            },
            {
                "language": "kb",
                "scopeName": "source.kb",
                "path": "./syntaxes/kb.tmLanguage.json"
            },
            {
                "language": "kbb",
                "scopeName": "source.kbb",
                "path": "./syntaxes/kbb.tmLanguage.json"
            }
        ],
        "snippets": [
            {
                "language": "nlp",
                "scopeName": "source.nlp",
                "path": "./snippets/nlp.json"
            }
        ],
        "commands": [
            {
                "command": "nlp.openLegacyHelp",
                "category": "NLP",
                "title": "Open legacy help",
                "description": "Open the help on the textanalysis website"
            },
            {
                "command": "helpView.lookup",
                "category": "NLP",
                "title": "Lookup Word",
                "description": "Lookup a term in the help"
            },
            {
                "command": "textView.analyze",
                "title": "Analyze file",
                "icon": {
                    "light": "fileicons/images/light/run.svg",
                    "dark": "fileicons/images/dark/run.svg"
                }
            },
            {
                "command": "textView.analyzeLast",
                "title": "Analyze Last file",
                "icon": {
                    "light": "fileicons/images/light/run.svg",
                    "dark": "fileicons/images/dark/run.svg"
                }
            },
            {
                "command": "nlp.analyze",
                "category": "NLP",
                "title": "Analyze Text",
                "description": "Run the analyzer on text"
            },
            {
                "command": "nlp.ruleFired",
                "category": "NLP",
                "title": "View rule fired",
                "description": "View the rule that fired for this match"
            },
            {
                "command": "nlp.reformatRule",
                "category": "NLP",
                "title": "Reformat Rule",
                "description": "Reformat the rule with node numbers"
            },
            {
                "command": "nlp.generateRule",
                "category": "NLP",
                "title": "Generate Rule",
                "description": "Generate a rule from selected text"
            },
            {
                "command": "log.foldAll",
                "category": "Tree",
                "title": "Fold All",
                "description": "Fold all indents for entire text"
            },
            {
                "command": "log.unfoldAll",
                "category": "Tree",
                "title": "Unfold All",
                "description": "UnFold all indents for entire text"
            },
            {
                "command": "log.highlightText",
                "category": "Tree",
                "title": "Hightlight Text",
                "description": "Highlight the text of selected tree nodes"
            },
            {
                "command": "log.ruleFired",
                "category": "Tree",
                "title": "Display Rule",
                "description": "Display the rule fired"
            },
            {
                "command": "nlp.openSelTree",
                "category": "NLP",
                "title": "View selected tree",
                "description": "View the tree for the selected text"
            },
            {
                "command": "sequenceView.finalTree",
                "title": "Display Final Tree",
                "icon": {
                    "light": "fileicons/images/light/list-tree.svg",
                    "dark": "fileicons/images/dark/list-tree.svg"
                }
            },
            {
                "command": "sequenceView.reveal",
                "title": "Analyzer Sequence: Reveal"
            },
            {
                "command": "sequenceView.changeTitle",
                "title": "Analyzer Sequence: Change Title"
            },
            {
                "command": "sequenceView.typePat",
                "title": "Pattern"
            },
            {
                "command": "sequenceView.typeRec",
                "title": "Recursive"
            },
            {
                "command": "sequenceView.typeOn",
                "title": "Active"
            },
            {
                "command": "sequenceView.typeOff",
                "title": "Inactive"
            },
            {
                "command": "sequenceView.newFolder",
                "title": "New Folder",
                "icon": {
                    "light": "fileicons/images/light/new-folder.svg",
                    "dark": "fileicons/images/dark/new-folder.svg"
                }
            },
            {
                "command": "sequenceView.moveUp",
                "title": "Move Up",
                "icon": {
                    "light": "resources/light/up.svg",
                    "dark": "resources/dark/up.svg"
                }
            },
            {
                "command": "sequenceView.moveDown",
                "title": "Move Down",
                "icon": {
                    "light": "resources/light/down.svg",
                    "dark": "resources/dark/down.svg"
                }
            },
            {
                "command": "sequenceView.openKB",
                "title": "Open KB",
                "icon": {
                    "light": "fileicons/images/light/kb.svg",
                    "dark": "fileicons/images/dark/kb.svg"
                }
            },
            {
                "command": "sequenceView.openHighlight",
                "title": "Highlight Text",
                "icon": {
                    "light": "fileicons/images/light/symbol-keyword.svg",
                    "dark": "fileicons/images/dark/symbol-keyword.svg"
                }
            },
            {
                "command": "sequenceView.openFile",
                "title": "Open NLP file",
                "icon": {
                    "light": "fileicons/images/light/code.svg",
                    "dark": "fileicons/images/dark/code.svg"
                }
            },
            {
                "command": "sequenceView.openTree",
                "title": "Open Tree file",
                "icon": {
                    "light": "fileicons/images/light/list-tree.svg",
                    "dark": "fileicons/images/dark/list-tree.svg"
                }
            },
            {
                "command": "sequenceView.rename",
                "title": "Rename pass",
                "icon": {
                    "light": "fileicons/images/light/code.svg",
                    "dark": "fileicons/images/dark/code.svg"
                }
            },
            {
                "command": "sequenceView.insertLibrary",
                "title": "Insert Library pass",
                "icon": {
                    "light": "fileicons/images/light/new-file.svg",
                    "dark": "fileicons/images/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.insertNew",
                "title": "Insert New pass",
                "icon": {
                    "light": "fileicons/images/light/new-file.svg",
                    "dark": "fileicons/images/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.insert",
                "title": "Insert Existing pass",
                "icon": {
                    "light": "fileicons/images/light/file-code.svg",
                    "dark": "fileicons/images/dark/file-code.svg"
                }
            },
            {
                "command": "sequenceView.delete",
                "title": "Delete pass",
                "icon": {
                    "light": "fileicons/images/light/file-code.svg",
                    "dark": "fileicons/images/dark/file-code.svg"
                }
            },
            {
                "command": "textView.newDir",
                "title": "New Directory",
                "icon": {
                    "light": "fileicons/images/light/new-folder.svg",
                    "dark": "fileicons/images/dark/new-folder.svg"
                }
            },
            {
                "command": "textView.newText",
                "title": "New Text File",
                "icon": {
                    "light": "fileicons/images/light/new-file.svg",
                    "dark": "fileicons/images/dark/new-file.svg"
                }
            },
            {
                "command": "textView.existingText",
                "title": "Insert existing text",
                "icon": {
                    "light": "fileicons/images/light/new-file.svg",
                    "dark": "fileicons/images/dark/new-file.svg"
                }
            },
            {
                "command": "textView.search",
                "title": "Search",
                "icon": {
                    "light": "fileicons/images/light/search.svg",
                    "dark": "fileicons/images/dark/search.svg"
                }
            },
            {
                "command": "textView.deleteText",
                "title": "Delete File",
                "icon": {
                    "light": "fileicons/images/light/chrome-close.svg",
                    "dark": "fileicons/images/dark/chrome-close.svg"
                }
            },
            {
                "command": "analyzerView.newAnalyzer",
                "title": "New Analyzer",
                "icon": {
                    "light": "fileicons/images/light/new-folder.svg",
                    "dark": "fileicons/images/dark/new-folder.svg"
                }
            },
            {
                "command": "analyzerView.deleteAnalyzer",
                "title": "Delete Analyzer",
                "icon": {
                    "light": "fileicons/images/light/chrome-close.svg",
                    "dark": "fileicons/images/dark/chrome-close.svg"
                }
            },
            {
                "command": "sequenceView.search",
                "title": "search",
                "icon": {
                    "light": "fileicons/images/light/search.svg",
                    "dark": "fileicons/images/dark/search.svg"
                }
            },
            {
                "command": "sequenceView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "textView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "findView.clearAll",
                "title": "Clear All",
                "icon": {
                    "light": "fileicons/images/light/close.svg",
                    "dark": "fileicons/images/dark/close.svg"
                }
            },
            {
                "command": "findView.refreshAll",
                "title": "Finds",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "textView.openText",
                "title": "Open Text",
                "icon": {
                    "light": "resources/light/document.svg",
                    "dark": "resources/dark/document.svg"
                }
            },
            {
                "command": "analyzerView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "outputView.deleteOutput",
                "title": "DeleteFile",
                "icon": {
                    "light": "fileicons/images/light/close.svg",
                    "dark": "fileicons/images/dark/close.svg"
                }
            },
            {
                "command": "outputView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "outputView.kb",
                "title": "Display KB Files",
                "icon": {
                    "light": "fileicons/images/light/kb.svg",
                    "dark": "fileicons/images/dark/kb.svg"
                }
            },
            {
                "command": "outputView.txt",
                "title": "Display Output Files",
                "icon": {
                    "light": "resources/light/document.svg",
                    "dark": "resources/dark/document.svg"
                }
            },
            {
                "command": "outputView.addKB",
                "title": "Add KB File",
                "icon": {
                    "light": "fileicons/images/light/kb-new.svg",
                    "dark": "fileicons/images/dark/kb-new.svg"
                }
            },
            {
                "command": "logView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "logView.conceptualGrammar",
                "title": "Conceptual Grammar",
                "icon": {
                    "light": "fileicons/images/light/kb.svg",
                    "dark": "fileicons/images/dark/kb.svg"
                }
            },
            {
                "command": "logView.timing",
                "title": "Timings",
                "icon": {
                    "light": "fileicons/images/light/watch.svg",
                    "dark": "fileicons/images/dark/watch.svg"
                }
            },
            {
                "command": "logView.clear",
                "title": "Clear",
                "icon": {
                    "light": "fileicons/images/light/close.svg",
                    "dark": "fileicons/images/dark/close.svg"
                }
            },
            {
                "command": "logView.makeAna",
                "title": "Analyzer Log Output",
                "icon": {
                    "light": "fileicons/images/light/gear.svg",
                    "dark": "fileicons/images/dark/gear.svg"
                }
            }
        ],
        "keybindings": [
            {
                "command": "textView.analyzeLast",
                "key": "f5",
                "mac": "f5"
            }
        ],
        "menus": {
            "explorer/context": [
                {
                    "when": "resourceLangId == nlp  && resourceExtname == .txt",
                    "command": "nlp.analyze",
                    "group": "sequence"
                }
            ],
            "editor/context": [
                {
                    "when": "resourceExtname == .txt",
                    "command": "nlp.analyze",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt",
                    "command": "nlp.ruleFired",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt || resourceExtname == .txt",
                    "command": "nlp.openSelTree",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "helpView.lookup",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.reformatRule",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt",
                    "command": "nlp.generateRule",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.openLegacyHelp",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .log",
                    "command": "log.foldAll",
                    "group": "fold"
                },
                {
                    "when": "resourceExtname == .log",
                    "command": "log.unfoldAll",
                    "group": "fold"
                },
                {
                    "when": "resourceExtname == .log",
                    "command": "log.highlightText",
                    "group": "display"
                },
                {
                    "when": "resourceExtname == .log",
                    "command": "log.ruleFired",
                    "group": "display"
                }
            ],
            "view/title": [
                {
                    "command": "textView.search",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.analyzeLast",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.openText",
                    "when": "view == sequenceView",
                    "group": "navigation"
                },
                {
                    "command": "sequenceView.finalTree",
                    "when": "view == sequenceView",
                    "group": "navigation"
                },
                {
                    "command": "sequenceView.search",
                    "when": "view == sequenceView",
                    "group": "navigation"
                },
                {
                    "command": "sequenceView.refreshAll",
                    "when": "view == sequenceView",
                    "group": "navigation"
                },
                {
                    "command": "textView.newDir",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.newText",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.existingText",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.openText",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.refreshAll",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "outputView.txt",
                    "when": "view == outputView",
                    "group": "navigation"
                },
                {
                    "command": "outputView.kb",
                    "when": "view == outputView",
                    "group": "navigation"
                },
                {
                    "command": "outputView.addKB",
                    "when": "view == outputView",
                    "group": "navigation"
                },
                {
                    "command": "outputView.refreshAll",
                    "when": "view == outputView",
                    "group": "navigation"
                },
                {
                    "command": "logView.refreshAll",
                    "when": "view == logView",
                    "group": "navigation"
                },
                {
                    "command": "logView.conceptualGrammar",
                    "when": "view == logView",
                    "group": "navigation"
                },
                {
                    "command": "logView.timing",
                    "when": "view == logView",
                    "group": "navigation"
                },
                {
                    "command": "logView.clear",
                    "when": "view == logView",
                    "group": "navigation"
                },
                {
                    "command": "logView.makeAna",
                    "when": "view == logView",
                    "group": "navigation"
                },
                {
                    "command": "analyzerView.deleteAnalyzer",
                    "when": "view == analyzerView",
                    "group": "navigation"
                },
                {
                    "command": "analyzerView.newAnalyzer",
                    "when": "view == analyzerView",
                    "group": "navigation"
                },
                {
                    "command": "analyzerView.refreshAll",
                    "when": "view == analyzerView",
                    "group": "navigation"
                },
                {
                    "command": "findView.clearAll",
                    "when": "view == findView",
                    "group": "navigation"
                },
                {
                    "command": "findView.refreshAll",
                    "when": "view == findView",
                    "group": "navigation"
                }
            ],
            "view/item/context": [
                {
                    "command": "textView.analyze",
                    "when": "view == textView && viewItem == file",
                    "group": "file"
                },
                {
                    "command": "sequenceView.openFile",
                    "when": "view == sequenceView && viewItem == file",
                    "group": "display"
                },
                {
                    "command": "sequenceView.openTree",
                    "when": "view == sequenceView && viewItem =~ /(hasLog|hasLoghasKB)/",
                    "group": "display"
                },
                {
                    "command": "sequenceView.openHighlight",
                    "when": "view == sequenceView && viewItem =~ /(hasLog|hasLoghasKB)/",
                    "group": "display"
                },
                {
                    "command": "sequenceView.openKB",
                    "when": "view == sequenceView && viewItem =~ /(hasKB|hasLoghasKB)/",
                    "group": "display"
                },
                {
                    "command": "sequenceView.moveUp",
                    "when": "view == sequenceView",
                    "group": "move"
                },
                {
                    "command": "sequenceView.moveDown",
                    "when": "view == sequenceView",
                    "group": "move"
                },
                {
                    "command": "sequenceView.rename",
                    "when": "view == sequenceView && viewItem =~ /(file|folder|hasKB|hasLog|hasLoghasKB)/",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.newFolder",
                    "when": "view == sequenceView",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.insertLibrary",
                    "when": "view == sequenceView",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.insertNew",
                    "when": "view == sequenceView",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.insert",
                    "when": "view == sequenceView",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.delete",
                    "when": "view == sequenceView",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.typePat",
                    "when": "view == sequenceView && viewItem =~ /(file|hasKB|hasLog|hasLoghasKB)/",
                    "group": "attribute"
                },
                {
                    "command": "sequenceView.typeRec",
                    "when": "view == sequenceView && viewItem =~ /(file|hasKB|hasLog|hasLoghasKB)/",
                    "group": "attribute"
                },
                {
                    "command": "sequenceView.typeOn",
                    "when": "view == sequenceView && viewItem =~ /(file|hasKB|hasLog|hasLoghasKB)/",
                    "group": "attribute"
                },
                {
                    "command": "sequenceView.typeOff",
                    "when": "view == sequenceView && viewItem =~ /(file|hasKB|hasLog|hasLoghasKB)/",
                    "group": "attribute"
                },
                {
                    "command": "textView.newDir",
                    "when": "view == textView && viewItem == file",
                    "group": "edit"
                },
                {
                    "command": "textView.newText",
                    "when": "view == textView && viewItem == file",
                    "group": "edit"
                },
                {
                    "command": "textView.existingText",
                    "when": "view == textView && viewItem == file",
                    "group": "edit"
                },
                {
                    "command": "textView.deleteText",
                    "when": "view == textView && viewItem == file",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.deleteAnalyzer",
                    "when": "view == analyzerView",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.newAnalyzer",
                    "when": "view == analyzerView",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.insertNew",
                    "when": "view == sequenceView && viewItem =~ /(stub|folder)/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.openTree",
                    "when": "view == sequenceView && viewItem =~ /hasLog/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.openHighlight",
                    "when": "view == sequenceView && viewItem =~ /(hasLog|hasLoghasKB)/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.openKB",
                    "when": "view == sequenceView && viewItem =~ /(hasKB|hasLoghasKB)/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.moveUp",
                    "when": "view == sequenceView",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.moveDown",
                    "when": "view == sequenceView",
                    "group": "inline"
                },
                {
                    "command": "textView.analyze",
                    "when": "view == textView && viewItem == file",
                    "group": "inline"
                },
                {
                    "command": "textView.newDir",
                    "when": "view == textView",
                    "group": "inline"
                },
                {
                    "command": "textView.newText",
                    "when": "view == textView",
                    "group": "inline"
                },
                {
                    "command": "textView.deleteText",
                    "when": "view == textView",
                    "group": "inline"
                },
                {
                    "command": "analyzerView.newAnalyzer",
                    "when": "view == analyzerView",
                    "group": "inline"
                },
                {
                    "command": "analyzerView.deleteAnalyzer",
                    "when": "view == analyzerView",
                    "group": "inline"
                },
                {
                    "command": "outputView.deleteOutput",
                    "when": "view == outputView",
                    "group": "inline"
                }
            ]
        }
    },
    "dependencies": {
        "@types/mkdirp": "^1.0.0",
        "@types/rimraf": "^3.0.0",
        "copy-dir": "^1.3.0",
        "find-in-files": "^0.5.0",
        "findit": "^2.0.0",
        "fs": "0.0.1-security",
        "ftp": "^0.3.10",
        "mkdirp": "^1.0.4",
        "readline": "^1.3.0",
        "rimraf": "^3.0.2",
        "vscode": "^1.1.37"
    },
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "pretest": "npm run compile",
        "test": "node ./out/test/runTest.js"
    },
    "devDependencies": {
        "@types/glob": "^7.1.1",
        "@types/mocha": "^5.2.7",
        "@types/node": "^12.12.62",
        "@types/vscode": "^1.45.0",
        "glob": "^7.1.5",
        "mocha": "^6.2.2",
        "tslib": "^2.0.3",
        "tslint": "^5.20.0",
        "typescript": "^3.6.4",
        "vscode-test": "^1.2.2"
    }
}
