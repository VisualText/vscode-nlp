{
    "name": "nlp",
    "displayName": "NLP",
    "description": "NLP++: dedicated computer language for NLP - Anything Thinkable",
    "icon": "resources/NLPppLogo.png",
    "version": "1.30.8",
    "publisher": "dehilster",
    "enableProposedApi": false,
    "engines": {
        "vscode": "^1.65.0"
    },
    "categories": [
        "Programming Languages",
        "Snippets",
        "Linters"
    ],
    "activationEvents": [
        "onLanguage:nlp",
        "onView:sequenceView"
    ],
    "main": "./dist/extension.js",
    "author": {
        "name": "David de Hilster"
    },
    "homepage": "http://visualtext.org",
    "bugs": {
        "url": "https://github.com/VisualText/vscode-nlp/issues",
        "email": "contact@visualtext.org"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/visualtext/vscode-nlp.git"
    },
    "galleryBanner": {
        "color": "#9ba6de",
        "theme": "light"
    },
    "extensionDependencies": [
        "vscode.json"
    ],
    "contributes": {
        "views": {
            "visualText": [
                {
                    "id": "textView",
                    "name": "Text"
                },
                {
                    "id": "sequenceView",
                    "name": "Analyzer Sequence",
                    "icon": "resources/dark/dna.svg"
                }
            ],
            "vtOutput": [
                {
                    "id": "outputView",
                    "name": "Output Files",
                    "icon": "resources/dark/document.svg"
                },
                {
                    "id": "analyzerView",
                    "name": "Analyzers",
                    "icon": "resources/dark/gear.svg"
                },
                {
                    "id": "findView",
                    "name": "Find Results",
                    "icon": "resources/dark/search.svg"
                },
                {
                    "id": "logView",
                    "name": "Logging",
                    "icon": "resources/dark/error.svg"
                }
            ]
        },
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "visualText",
                    "title": "VisualText",
                    "icon": "resources/NLPIcon.svg"
                }
            ],
            "panel": [
                {
                    "id": "vtOutput",
                    "title": "VisualText",
                    "icon": "resources/dark/document.svg"
                }
            ]
        },
        "iconThemes": [
            {
                "id": "nlp",
                "label": "NLP Files",
                "path": "./resources/vs_nlp-icon-theme.json"
            }
        ],
        "languages": [
            {
                "id": "nlp",
                "extensions": [
                    ".nlp",
                    ".nlppp",
                    ".pat"
                ],
                "aliases": [
                    "NLP++",
                    ".NLP",
                    "NLP",
                    "nlp",
                    ".nlp"
                ],
                "configuration": "./nlp-configuration.json"
            },
            {
                "id": "seq",
                "extensions": [
                    ".seq"
                ],
                "aliases": [
                    "SEQ",
                    ".SEQ",
                    "seq",
                    ".seq"
                ],
                "configuration": "./seq-configuration.json"
            },
            {
                "id": "txxt",
                "extensions": [
                    ".txxt"
                ],
                "aliases": [
                    "TXXT",
                    ".TXXT",
                    "txxt",
                    ".txxt"
                ],
                "configuration": "./txxt-configuration.json"
            },
            {
                "id": "tree",
                "extensions": [
                    ".log",
                    ".tree"
                ],
                "aliases": [
                    "LOG",
                    "log",
                    ".TREE",
                    "TREE",
                    "tree",
                    ".tree"
                ],
                "configuration": "./tree-configuration.json"
            },
            {
                "id": "kb",
                "extensions": [
                    ".kb"
                ],
                "aliases": [
                    "KB",
                    ".KB",
                    "Kb",
                    "kb",
                    ".kb"
                ],
                "configuration": "./kb-configuration.json"
            },
            {
                "id": "kbb",
                "extensions": [
                    ".kbb"
                ],
                "aliases": [
                    "KBB",
                    ".KBB",
                    "Kbb",
                    "kbb",
                    ".kbb"
                ],
                "configuration": "./kbb-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "nlp",
                "scopeName": "source.nlp",
                "path": "./syntaxes/nlp.tmLanguage.json"
            },
            {
                "language": "seq",
                "scopeName": "source.seq",
                "path": "./syntaxes/seq.tmLanguage.json"
            },
            {
                "language": "txxt",
                "scopeName": "source.txxt",
                "path": "./syntaxes/txxt.tmLanguage.json"
            },
            {
                "language": "tree",
                "scopeName": "source.tree",
                "path": "./syntaxes/tree.tmLanguage.json"
            },
            {
                "language": "kb",
                "scopeName": "source.kb",
                "path": "./syntaxes/kb.tmLanguage.json"
            },
            {
                "language": "kbb",
                "scopeName": "source.kbb",
                "path": "./syntaxes/kbb.tmLanguage.json"
            }
        ],
        "snippets": [
            {
                "language": "nlp",
                "scopeName": "source.nlp",
                "path": "./snippets/nlp.json"
            }
        ],
        "commands": [
            {
                "command": "nlp.sortText",
                "title": "Sort & Unique text lines",
                "description": "Sort and unique text lines"
            },
            {
                "command": "nlp.openOnlineFunctionHelp",
                "category": "NLP",
                "title": "Open online function help",
                "description": "Open online function help"
            },
            {
                "command": "nlp.openOnlineVariableHelp",
                "category": "NLP",
                "title": "Open online variable help",
                "description": "Open online variable help"
            },
            {
                "command": "nlp.selectSequence",
                "category": "NLP",
                "title": "Reveal Sequence Number",
                "description": "Reveals the sequence number for the NLP file"
            },
            {
                "command": "helpView.lookup",
                "category": "NLP",
                "title": "Lookup Word",
                "description": "Lookup a term in the help"
            },
            {
                "command": "helpView.lookupBrowser",
                "category": "NLP",
                "title": "Lookup Word in Browser",
                "description": "Lookup a term in the help in Browser"
            },
            {
                "command": "textView.analyze",
                "title": "Analyze file",
                "icon": {
                    "light": "resources/light/run.svg",
                    "dark": "resources/dark/run.svg"
                }
            },
            {
                "command": "textView.analyzeLast",
                "title": "Analyze Last file",
                "icon": {
                    "light": "resources/light/run.svg",
                    "dark": "resources/dark/run.svg"
                }
            },
            {
                "command": "textView.rename",
                "title": "Rename File",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "textView.analyzeDir",
                "title": "Analyze Directory",
                "icon": {
                    "light": "resources/light/run.svg",
                    "dark": "resources/dark/run.svg"
                }
            },
            {
                "command": "textView.convert",
                "title": "Convert files to *.txt",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "textView.renameDir",
                "title": "Rename Directory",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "nlp.analyze",
                "category": "NLP",
                "title": "Analyze Text",
                "description": "Run the analyzer on a folder or text"
            },
            {
                "command": "nlp.ruleFired",
                "category": "NLP",
                "title": "View rule fired",
                "description": "View the rule that fired for this match"
            },
            {
                "command": "nlp.reformatRule",
                "category": "NLP",
                "title": "Reformat Rule",
                "description": "Reformat the rule with node numbers"
            },
            {
                "command": "nlp.searchWord",
                "category": "NLP",
                "title": "Search",
                "description": "Search for chosen word in passes"
            },
            {
                "command": "nlp.searchFunction",
                "category": "NLP",
                "title": "Search Function",
                "description": "Search for function"
            },
            {
                "command": "nlp.generateRule",
                "category": "NLP",
                "title": "Generate Rule General",
                "description": "Generate a generalized rule from selected text"
            },
            {
                "command": "nlp.generateExactRule",
                "category": "NLP",
                "title": "Generate Rule Exact",
                "description": "Generate an exact rule from selected text"
            },
            {
                "command": "nlp.duplicateLine",
                "category": "NLP",
                "title": "Duplicate Line",
                "description": "Duplicates the current line"
            },
            {
                "command": "nlp.commentLines",
                "category": "NLP",
                "title": "Comment Line",
                "description": "Comments or uncomments selected lines"
            },
            {
                "command": "log.foldAll",
                "category": "Tree",
                "title": "Fold All",
                "description": "Fold all indents for entire text"
            },
            {
                "command": "log.unfoldAll",
                "category": "Tree",
                "title": "Unfold All",
                "description": "UnFold all indents for entire text"
            },
            {
                "command": "log.highlightText",
                "category": "Tree",
                "title": "Hightlight Text",
                "description": "Highlight the text of selected tree nodes"
            },
            {
                "command": "log.ruleFired",
                "category": "Tree",
                "title": "Display Rule",
                "description": "Display the rule fired"
            },
            {
                "command": "nlp.openSelTree",
                "category": "NLP",
                "title": "View selected tree",
                "description": "View the tree for the selected text"
            },
            {
                "command": "sequenceView.tokenize",
                "title": "Tokenizer"
            },
            {
                "command": "sequenceView.dicttok",
                "title": "Dictionary Tokenizer"
            },
            {
                "command": "sequenceView.dicttokz",
                "title": "Dictionary No Whitespace Tokenizer"
            },
            {
                "command": "sequenceView.cmltok",
                "title": "CML Tokenizer"
            },
            {
                "command": "sequenceView.convert",
                "title": "Convert .pat files to .nlp",
                "icon": {
                    "light": "resources/light/rename.svg",
                    "dark": "resources/dark/rename.svg"
                }
            },
            {
                "command": "sequenceView.finalTree",
                "title": "Display Final Tree",
                "icon": {
                    "light": "resources/light/tree.svg",
                    "dark": "resources/dark/tree.svg"
                }
            },
            {
                "command": "sequenceView.reveal",
                "title": "Analyzer Sequence: Reveal"
            },
            {
                "command": "sequenceView.changeTitle",
                "title": "Analyzer Sequence: Change Title"
            },
            {
                "command": "sequenceView.typePat",
                "title": "Pattern"
            },
            {
                "command": "sequenceView.typeRec",
                "title": "Recursive"
            },
            {
                "command": "sequenceView.typeOn",
                "title": "Active"
            },
            {
                "command": "sequenceView.typeOff",
                "title": "Inactive"
            },
            {
                "command": "sequenceView.newFolder",
                "title": "New Folder",
                "icon": {
                    "light": "resources/light/new-folder.svg",
                    "dark": "resources/dark/new-folder.svg"
                }
            },
            {
                "command": "sequenceView.moveUp",
                "title": "Move Up",
                "icon": {
                    "light": "resources/light/up.svg",
                    "dark": "resources/dark/up.svg"
                }
            },
            {
                "command": "sequenceView.moveDown",
                "title": "Move Down",
                "icon": {
                    "light": "resources/light/down.svg",
                    "dark": "resources/dark/down.svg"
                }
            },
            {
                "command": "sequenceView.openKB",
                "title": "Open KB",
                "icon": {
                    "light": "resources/light/kb.svg",
                    "dark": "resources/dark/kb.svg"
                }
            },
            {
                "command": "sequenceView.openHighlight",
                "title": "Highlight Text",
                "icon": {
                    "light": "resources/light/symbol-keyword.svg",
                    "dark": "resources/dark/symbol-keyword.svg"
                }
            },
            {
                "command": "sequenceView.openFile",
                "title": "Open NLP file",
                "icon": {
                    "light": "resources/light/code.svg",
                    "dark": "resources/dark/code.svg"
                }
            },
            {
                "command": "sequenceView.openTree",
                "title": "Open Tree file",
                "icon": {
                    "light": "resources/light/tree.svg",
                    "dark": "resources/dark/tree.svg"
                }
            },
            {
                "command": "sequenceView.rename",
                "title": "Rename pass",
                "icon": {
                    "light": "resources/light/code.svg",
                    "dark": "resources/dark/code.svg"
                }
            },
            {
                "command": "sequenceView.insertLibrary",
                "title": "Insert Library pass",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.insertNew",
                "title": "Insert New pass",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "sequenceView.insert",
                "title": "Insert Existing pass",
                "icon": {
                    "light": "resources/light/file-code.svg",
                    "dark": "resources/dark/file-code.svg"
                }
            },
            {
                "command": "sequenceView.delete",
                "title": "Delete pass",
                "icon": {
                    "light": "resources/light/file-code.svg",
                    "dark": "resources/dark/file-code.svg"
                }
            },
            {
                "command": "sequenceView.duplicate",
                "title": "Duplicate pass"
            },
            {
                "command": "textView.newDir",
                "title": "New Folder",
                "icon": {
                    "light": "resources/light/new-folder.svg",
                    "dark": "resources/dark/new-folder.svg"
                }
            },
            {
                "command": "textView.newText",
                "title": "New Text File",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "textView.existingText",
                "title": "Insert existing text",
                "icon": {
                    "light": "resources/light/new-file.svg",
                    "dark": "resources/dark/new-file.svg"
                }
            },
            {
                "command": "textView.existingFolder",
                "title": "Insert existing folder",
                "icon": {
                    "light": "resources/light/new-folder.svg",
                    "dark": "resources/dark/new-folder.svg"
                }
            },
            {
                "command": "textView.search",
                "title": "Search",
                "icon": {
                    "light": "resources/light/search.svg",
                    "dark": "resources/dark/search.svg"
                }
            },
            {
                "command": "textView.deleteFile",
                "title": "Delete File",
                "icon": {
                    "light": "resources/light/chrome-close.svg",
                    "dark": "resources/dark/chrome-close.svg"
                }
            },
            {
                "command": "textView.deleteDir",
                "title": "Delete Folder",
                "icon": {
                    "light": "resources/light/chrome-close.svg",
                    "dark": "resources/dark/chrome-close.svg"
                }
            },
            {
                "command": "analyzerView.colorizeAnalyzer",
                "title": "Colorize Analyzer Folder",
                "icon": {
                    "light": "resources/light/color-mode.svg",
                    "dark": "resources/dark/color-mode.svg"
                }
            },
            {
                "command": "analyzerView.loadDefaultAnalyzers",
                "title": "Load Default Analyzers",
                "icon": {
                    "light": "resources/light/gear.svg",
                    "dark": "resources/dark/gear.svg"
                }
            },
            {
                "command": "analyzerView.deleteLogFiles",
                "title": "Delete Log Files",
                "icon": {
                    "light": "resources/light/x-box.svg",
                    "dark": "resources/dark/x-box.svg"
                }
            },
            {
                "command": "analyzerView.copyAnalyzer",
                "title": "Copy analyzer",
                "icon": {
                    "light": "resources/light/anacopy.svg",
                    "dark": "resources/dark/anacopy.svg"
                }
            },
            {
                "command": "analyzerView.copyAll",
                "title": "Copy All Analyzers",
                "icon": {
                    "light": "resources/light/anacopy.svg",
                    "dark": "resources/dark/anacopy.svg"
                }
            },
            {
                "command": "textView.deleteLogFiles",
                "title": "Delete Log Files",
                "icon": {
                    "light": "resources/light/x-box.svg",
                    "dark": "resources/dark/x-box.svg"
                }
            },
            {
                "command": "textView.deleteAllLogs",
                "title": "Delete All Log Files",
                "icon": {
                    "light": "resources/light/x-box.svg",
                    "dark": "resources/dark/x-box.svg"
                }
            },
            {
                "command": "textView.deleteAnalyzerLogs",
                "title": "Delete Analyzer Logs",
                "icon": {
                    "light": "resources/light/x-box.svg",
                    "dark": "resources/dark/x-box.svg"
                }
            },
            {
                "command": "analyzerView.deleteAllAnalyzerLogs",
                "title": "Delete Log Files",
                "icon": {
                    "light": "resources/light/x-box.svg",
                    "dark": "resources/dark/x-box.svg"
                }
            },
            {
                "command": "analyzerView.newAnalyzer",
                "title": "New Analyzer",
                "icon": {
                    "light": "resources/light/new-folder.svg",
                    "dark": "resources/dark/new-folder.svg"
                }
            },
            {
                "command": "analyzerView.deleteAnalyzer",
                "title": "Delete Analyzer",
                "icon": {
                    "light": "resources/light/chrome-close.svg",
                    "dark": "resources/dark/chrome-close.svg"
                }
            },
            {
                "command": "analyzerView.deleteAnalyzerLogs",
                "title": "Delete Analyzer Logs",
                "icon": {
                    "light": "resources/light/x-box.svg",
                    "dark": "resources/dark/x-box.svg"
                }
            },
            {
                "command": "sequenceView.search",
                "title": "Search",
                "icon": {
                    "light": "resources/light/search.svg",
                    "dark": "resources/dark/search.svg"
                }
            },
            {
                "command": "sequenceView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "textView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "findView.clearAll",
                "title": "Clear All",
                "icon": {
                    "light": "resources/light/close.svg",
                    "dark": "resources/dark/close.svg"
                }
            },
            {
                "command": "findView.refreshAll",
                "title": "Finds",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "textView.openText",
                "title": "Open Text",
                "icon": {
                    "light": "resources/light/document.svg",
                    "dark": "resources/dark/document.svg"
                }
            },
            {
                "command": "analyzerView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "outputView.orphanPasses",
                "title": "Orphan Passes",
                "icon": {
                    "light": "resources/light/gear.svg",
                    "dark": "resources/dark/gear.svg"
                }
            },
            {
                "command": "outputView.deleteOutput",
                "title": "Delete File",
                "icon": {
                    "light": "resources/light/close.svg",
                    "dark": "resources/dark/close.svg"
                }
            },
            {
                "command": "outputView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "outputView.kb",
                "title": "Display KB Files",
                "icon": {
                    "light": "resources/light/kb.svg",
                    "dark": "resources/dark/kb.svg"
                }
            },
            {
                "command": "outputView.txt",
                "title": "Display Output Files",
                "icon": {
                    "light": "resources/light/document.svg",
                    "dark": "resources/dark/document.svg"
                }
            },
            {
                "command": "outputView.addKB",
                "title": "Add KB File",
                "icon": {
                    "light": "resources/light/kb-new.svg",
                    "dark": "resources/dark/kb-new.svg"
                }
            },
            {
                "command": "logView.refreshAll",
                "title": "Refresh",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "logView.conceptualGrammar",
                "title": "Conceptual Grammar",
                "icon": {
                    "light": "resources/light/kb.svg",
                    "dark": "resources/dark/kb.svg"
                }
            },
            {
                "command": "logView.timing",
                "title": "Timings",
                "icon": {
                    "light": "resources/light/watch.svg",
                    "dark": "resources/dark/watch.svg"
                }
            },
            {
                "command": "logView.setClearFlag",
                "title": "Clear"
            },
            {
                "command": "logView.clear",
                "title": "Clear",
                "icon": {
                    "light": "resources/light/close.svg",
                    "dark": "resources/dark/close.svg"
                }
            },
            {
                "command": "logView.makeAna",
                "title": "Analyzer Log Output",
                "icon": {
                    "light": "resources/light/gear.svg",
                    "dark": "resources/dark/gear.svg"
                }
            }
        ],
        "keybindings": [
            {
                "command": "textView.analyzeLast",
                "key": "f5",
                "mac": "f5"
            },
            {
                "command": "nlp.duplicateLine",
                "key": "ctrl+shift+D",
                "mac": "cmd+shift+D",
                "when": "resourceLangId == nlp"
            }
        ],
        "menus": {
            "explorer/context": [
                {
                    "when": "resourceLangId == nlp  && resourceExtname == .txt",
                    "command": "nlp.analyze",
                    "group": "sequence"
                }
            ],
            "editor/context": [
                {
                    "when": "resourceExtname == .txt",
                    "command": "nlp.analyze",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txt || resourceExtname == .nlp",
                    "command": "nlp.sortText",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt",
                    "command": "nlp.ruleFired",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt || resourceExtname == .txt",
                    "command": "nlp.openSelTree",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt || resourceExtname == .txt",
                    "command": "nlp.generateRule",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .txxt || resourceExtname == .txt",
                    "command": "nlp.generateExactRule",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.reformatRule",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.duplicateLine",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.commentLines",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.searchWord",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.searchFunction",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.openOnlineFunctionHelp",
                    "group": "help"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.openOnlineVariableHelp",
                    "group": "help"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "helpView.lookup",
                    "group": "help"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "helpView.lookupBrowser",
                    "group": "help"
                },
                {
                    "when": "resourceExtname == .pat || resourceExtname == .nlp",
                    "command": "nlp.selectSequence",
                    "group": "nlp"
                },
                {
                    "when": "resourceExtname == .log || resourceExtname == .tree",
                    "command": "log.foldAll",
                    "group": "fold"
                },
                {
                    "when": "resourceExtname == .log || resourceExtname == .tree",
                    "command": "log.unfoldAll",
                    "group": "fold"
                },
                {
                    "when": "resourceExtname == .log || resourceExtname == .tree",
                    "command": "log.highlightText",
                    "group": "display"
                },
                {
                    "when": "resourceExtname == .log || resourceExtname == .tree",
                    "command": "log.ruleFired",
                    "group": "display"
                }
            ],
            "view/title": [
                {
                    "command": "textView.search",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.analyzeLast",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.newDir",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.newText",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.existingText",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.existingFolder",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.openText",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.refreshAll",
                    "when": "view == textView",
                    "group": "navigation"
                },
                {
                    "command": "textView.deleteAllLogs",
                    "when": "view == textView && text.hasLogs",
                    "group": "navigation"
                },
                {
                    "command": "sequenceView.convert",
                    "when": "view == sequenceView && sequence.hasPat",
                    "group": "navigation"
                },
                {
                    "command": "textView.openText",
                    "when": "view == sequenceView",
                    "group": "navigation"
                },
                {
                    "command": "sequenceView.finalTree",
                    "when": "view == sequenceView",
                    "group": "navigation"
                },
                {
                    "command": "sequenceView.search",
                    "when": "view == sequenceView",
                    "group": "navigation"
                },
                {
                    "command": "sequenceView.refreshAll",
                    "when": "view == sequenceView",
                    "group": "navigation"
                },
                {
                    "command": "outputView.orphanPasses",
                    "when": "view == outputView",
                    "group": "navigation"
                },
                {
                    "command": "outputView.txt",
                    "when": "view == outputView",
                    "group": "navigation"
                },
                {
                    "command": "outputView.kb",
                    "when": "view == outputView",
                    "group": "navigation"
                },
                {
                    "command": "outputView.addKB",
                    "when": "view == outputView",
                    "group": "navigation"
                },
                {
                    "command": "outputView.refreshAll",
                    "when": "view == outputView",
                    "group": "navigation"
                },
                {
                    "command": "logView.refreshAll",
                    "when": "view == logView",
                    "group": "navigation"
                },
                {
                    "command": "logView.conceptualGrammar",
                    "when": "view == logView",
                    "group": "navigation"
                },
                {
                    "command": "logView.timing",
                    "when": "view == logView",
                    "group": "navigation"
                },
                {
                    "command": "logView.clear",
                    "when": "view == logView",
                    "group": "navigation"
                },
                {
                    "command": "logView.makeAna",
                    "when": "view == logView",
                    "group": "navigation"
                },
                {
                    "command": "analyzerView.colorizeAnalyzer",
                    "when": "view == analyzerView",
                    "group": "navigation"
                },
                {
                    "command": "analyzerView.loadDefaultAnalyzers",
                    "when": "view == analyzerView",
                    "group": "navigation"
                },
                {
                    "command": "analyzerView.deleteAnalyzer",
                    "when": "view == analyzerView",
                    "group": "navigation"
                },
                {
                    "command": "analyzerView.deleteAllAnalyzerLogs",
                    "when": "view == analyzerView && analyzers.hasLogs",
                    "group": "navigation"
                },
                {
                    "command": "analyzerView.newAnalyzer",
                    "when": "view == analyzerView",
                    "group": "navigation"
                },
                {
                    "command": "analyzerView.refreshAll",
                    "when": "view == analyzerView",
                    "group": "navigation"
                },
                {
                    "command": "analyzerView.copyAll",
                    "when": "view == analyzerView",
                    "group": "navigation"
                },
                {
                    "command": "findView.clearAll",
                    "when": "view == findView",
                    "group": "navigation"
                },
                {
                    "command": "findView.refreshAll",
                    "when": "view == findView",
                    "group": "navigation"
                }
            ],
            "view/item/context": [
                {
                    "command": "textView.analyze",
                    "when": "view == textView && viewItem == file",
                    "group": "file"
                },
                {
                    "command": "sequenceView.tokenize",
                    "when": "view == sequenceView && viewItem == tokenize",
                    "group": "tokenize"
                },
                {
                    "command": "sequenceView.dicttok",
                    "when": "view == sequenceView && viewItem == tokenize",
                    "group": "tokenize"
                },
                {
                    "command": "sequenceView.dicttokz",
                    "when": "view == sequenceView && viewItem == tokenize",
                    "group": "tokenize"
                },
                {
                    "command": "sequenceView.cmltok",
                    "when": "view == sequenceView && viewItem == tokenize",
                    "group": "tokenize"
                },
                {
                    "command": "sequenceView.openFile",
                    "when": "view == sequenceView && viewItem == file",
                    "group": "display"
                },
                {
                    "command": "sequenceView.openTree",
                    "when": "view == sequenceView && viewItem =~ /(hasLog|hasLoghasKB)/",
                    "group": "display"
                },
                {
                    "command": "sequenceView.openHighlight",
                    "when": "view == sequenceView && viewItem =~ /(hasLog|hasLoghasKB)/",
                    "group": "display"
                },
                {
                    "command": "sequenceView.openKB",
                    "when": "view == sequenceView && viewItem =~ /(hasKB|hasLoghasKB)/",
                    "group": "display"
                },
                {
                    "command": "sequenceView.moveUp",
                    "when": "view == sequenceView && viewItem =~ /(file|folder|hasKB|hasLog|hasLoghasKB)",
                    "group": "move"
                },
                {
                    "command": "sequenceView.moveDown",
                    "when": "view == sequenceView && viewItem =~ /(file|folder|hasKB|hasLog|hasLoghasKB)",
                    "group": "move"
                },
                {
                    "command": "sequenceView.rename",
                    "when": "view == sequenceView && viewItem =~ /(file|folder|hasKB|hasLog|hasLoghasKB)/",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.newFolder",
                    "when": "view == sequenceView",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.insertLibrary",
                    "when": "view == sequenceView",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.insertNew",
                    "when": "view == sequenceView",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.insert",
                    "when": "view == sequenceView",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.delete",
                    "when": "view == sequenceView && viewItem =~ /(file|hasKB|hasLog|hasLoghasKB)/",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.duplicate",
                    "when": "view == sequenceView && viewItem =~ /(file|hasKB|hasLog|hasLoghasKB)/",
                    "group": "edit"
                },
                {
                    "command": "sequenceView.typePat",
                    "when": "view == sequenceView && viewItem =~ /(file|hasKB|hasLog|hasLoghasKB)/",
                    "group": "attribute"
                },
                {
                    "command": "sequenceView.typeRec",
                    "when": "view == sequenceView && viewItem =~ /(file|hasKB|hasLog|hasLoghasKB)/",
                    "group": "attribute"
                },
                {
                    "command": "sequenceView.typeOn",
                    "when": "view == sequenceView && viewItem =~ /(file|hasKB|hasLog|hasLoghasKB)/",
                    "group": "attribute"
                },
                {
                    "command": "sequenceView.typeOff",
                    "when": "view == sequenceView && viewItem =~ /(file|hasKB|hasLog|hasLoghasKB)/",
                    "group": "attribute"
                },
                {
                    "command": "textView.rename",
                    "when": "view == textView && viewItem == file",
                    "group": "edit"
                },
                {
                    "command": "textView.deleteDir",
                    "when": "view == textView && viewItem =~ /dir/",
                    "group": "edit"
                },
                {
                    "command": "textView.analyzeDir",
                    "when": "view == textView && viewItem =~ /dir/",
                    "group": "edit"
                },
                {
                    "command": "textView.renameDir",
                    "when": "view == textView && viewItem =~ /dir/)",
                    "group": "edit"
                },
                {
                    "command": "textView.newText",
                    "when": "view == textView && viewItem =~ /dir/",
                    "group": "edit"
                },
                {
                    "command": "textView.newDir",
                    "when": "view == textView && viewItem =~ /dir/",
                    "group": "edit"
                },
                {
                    "command": "textView.convert",
                    "when": "view == textView && viewItem == dirHasNonText",
                    "group": "edit"
                },
                {
                    "command": "textView.newDir",
                    "when": "view == textView && (viewItem == file || viewItem == fileHasLog)",
                    "group": "edit"
                },
                {
                    "command": "textView.newText",
                    "when": "view == textView && (viewItem == file || viewItem == fileHasLog)",
                    "group": "edit"
                },
                {
                    "command": "textView.existingText",
                    "when": "view == textView && (viewItem == file || viewItem == fileHasLog)",
                    "group": "edit"
                },
                {
                    "command": "textView.existingFolder",
                    "when": "view == textView && (viewItem == file || viewItem == fileHasLog)",
                    "group": "edit"
                },
                {
                    "command": "textView.deleteFile",
                    "when": "view == textView && viewItem == file",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.colorizeAnalyzer",
                    "when": "view == analyzerView",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.loadDefaultAnalyzers",
                    "when": "view == analyzerView",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.deleteAnalyzer",
                    "when": "view == analyzerView",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.newAnalyzer",
                    "when": "view == analyzerView",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.copyAnalyzer",
                    "when": "view == analyzerView",
                    "group": "edit"
                },
                {
                    "command": "analyzerView.copyAnalyzer",
                    "when": "view == analyzerView",
                    "group": "inline"
                },
                {
                    "command": "analyzerView.deleteAnalyzerLogs",
                    "when": "view == analyzerView && viewItem == hasLogs",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.insertNew",
                    "when": "view == sequenceView && viewItem =~ /(stub|folder|tokenize)/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.openTree",
                    "when": "view == sequenceView && viewItem =~ /hasLog/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.openHighlight",
                    "when": "view == sequenceView && viewItem =~ /(hasLog|hasLoghasKB)/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.openKB",
                    "when": "view == sequenceView && viewItem =~ /(hasKB|hasLoghasKB)/",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.moveUp",
                    "when": "view == sequenceView",
                    "group": "inline"
                },
                {
                    "command": "sequenceView.moveDown",
                    "when": "view == sequenceView",
                    "group": "inline"
                },
                {
                    "command": "textView.rename",
                    "when": "view == textView && viewItem =~ /(file|fileHasLogs)/",
                    "group": "inline"
                },
                {
                    "command": "textView.analyzeDir",
                    "when": "view == textView && viewItem =~ /dir/",
                    "group": "inline"
                },
                {
                    "command": "textView.renameDir",
                    "when": "view == textView && viewItem =~ /dir/",
                    "group": "inline"
                },
                {
                    "command": "textView.analyze",
                    "when": "view == textView && viewItem =~ /(file|fileHasLogs)/",
                    "group": "inline"
                },
                {
                    "command": "textView.deleteAnalyzerLogs",
                    "when": "view == textView && viewItem == fileHasLogs",
                    "group": "inline"
                },
                {
                    "command": "textView.newDir",
                    "when": "view == textView",
                    "group": "inline"
                },
                {
                    "command": "textView.newText",
                    "when": "view == textView",
                    "group": "inline"
                },
                {
                    "command": "textView.deleteFile",
                    "when": "view == textView && viewItem == file",
                    "group": "inline"
                },
                {
                    "command": "textView.deleteDir",
                    "when": "view == textView && viewItem == dir",
                    "group": "inline"
                },
                {
                    "command": "analyzerView.newAnalyzer",
                    "when": "view == analyzerView",
                    "group": "inline"
                },
                {
                    "command": "analyzerView.deleteAnalyzer",
                    "when": "view == analyzerView",
                    "group": "inline"
                },
                {
                    "command": "outputView.deleteOutput",
                    "when": "view == outputView",
                    "group": "inline"
                }
            ]
        },
        "configuration": {
            "type": "object",
            "title": "NLP",
            "properties": {
                "user.name": {
                    "type": "string",
                    "scope": "application",
                    "default": "",
                    "description": "User name for top pass file comments"
                },
                "analyzer.current": {
                    "type": "string",
                    "scope": "resource",
                    "default": "",
                    "description": "Current Analyzer"
                },
                "engine.path": {
                    "type": "string",
                    "scope": "application",
                    "default": "",
                    "description": "NLP Engine path (nlp.exe)"
                },
                "engine.version": {
                    "type": "string",
                    "scope": "application",
                    "default": "",
                    "description": "NLP Engine version"
                },
                "engine.visualtext": {
                    "type": "string",
                    "scope": "application",
                    "default": "",
                    "description": "VisualText files version"
                }
            }
        }
    },
    "dependencies": {
        "copy-dir": "^1.3.0",
        "download-file": "^0.1.5",
        "extract-zip": "^2.0.1",
        "latest-version": "^6.0.0",
        "nodejs-file-downloader": "^4.7.3",
        "os": "^0.1.2",
        "rimraf": "^3.0.2",
        "tslib": "^2.3.1",
        "vsce": "^1.96.2"
    },
    "scripts": {
        "package": "vsce package",
        "publish": "vsce publish",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "pretest": "npm run compile",
        "test": "node ./dist/test/runTest.js",
        "vsce-package": "vsce package -o ./vscode.nlp.vsix"
    },
    "devDependencies": {
        "@types/glob": "^7.2.0",
        "@types/mocha": "^5.2.7",
        "@types/node": "^12.20.47",
        "@types/vscode": "^1.65.0",
        "glob": "^7.2.0",
        "mocha": "^6.2.2",
        "tslint": "^5.20.0",
        "typescript": "^4.4.4",
        "vscode-test": "^1.6.1"
    }
}
